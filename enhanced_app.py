# enhanced_app.py
import streamlit as st
import logging
from config.settings import app_config
from services.enhanced_db_service import DatabaseService
from services.auth_service import authenticate_user, register_user, logout

# Import enhanced pages
from pages import enhanced_dashboard, projects, tasks, gantt_chart
from components.navigation import render_sidebar

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Page configuration
st.set_page_config(
    page_title=app_config.PAGE_TITLE,
    page_icon=app_config.PAGE_ICON,
    layout=app_config.LAYOUT,
    initial_sidebar_state="expanded",
)

# Custom CSS
st.markdown(
    """
<style>
    .main-header {
        padding: 1rem 0;
        border-bottom: 2px solid #f0f2f6;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
    }
    .alert-box {
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    .success-box { background-color: #d4edda; border-left: 4px solid #28a745; }
    .warning-box { background-color: #fff3cd; border-left: 4px solid #ffc107; }
    .error-box { background-color: #f8d7da; border-left: 4px solid #dc3545; }
    
    /* Hide Streamlit default elements */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
</style>
""",
    unsafe_allow_html=True,
)


def initialize_app():
    """Initialize application and check database connection"""
    try:
        # Test database connection
        if DatabaseService.test_connection():
            logger.info("Database connection successful")
        else:
            st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
            st.stop()

    except Exception as e:
        logger.error(f"App initialization failed: {e}")
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô: {e}")
        st.stop()


def initialize_session_state():
    """Initialize session state variables"""
    session_keys = app_config.SESSION_KEYS

    defaults = {
        session_keys["logged_in"]: False,
        session_keys["user_id"]: None,
        session_keys["username"]: None,
        session_keys["user_role"]: None,
    }

    for key, default_value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = default_value


def render_login_page():
    """Render login and registration page"""
    st.markdown('<div class="main-header">', unsafe_allow_html=True)
    st.title("üîê Project Manager")
    st.markdown("</div>", unsafe_allow_html=True)

    col1, col2, col3 = st.columns([1, 2, 1])

    with col2:
        login_tab, register_tab = st.tabs(["‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"])

        with login_tab:
            render_login_form()

        with register_tab:
            render_register_form()


def render_login_form():
    """Render login form"""
    with st.form("login_form", clear_on_submit=False):
        st.subheader("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")

        username = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", max_chars=50)

        password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password", placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")

        login_button = st.form_submit_button(
            "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", type="primary", use_container_width=True
        )

        if login_button:
            if not username or not password:
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")
                return

            if authenticate_user(username, password):
                st.success(
                    f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {st.session_state[app_config.SESSION_KEYS['username']]}!"
                )
                st.rerun()
            else:
                st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")


def render_register_form():
    """Render registration form"""
    with st.form("register_form", clear_on_submit=True):
        st.subheader("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà")

        new_username = st.text_input(
            "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà",
            placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ 3-50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£",
            max_chars=50,
            help="‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ a-z, ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 0-9 ‡πÅ‡∏•‡∏∞‡∏Ç‡∏µ‡∏î‡∏•‡πà‡∏≤‡∏á _ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
        )

        col1, col2 = st.columns(2)
        with col1:
            new_password = st.text_input(
                "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password", placeholder="‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"
            )

        with col2:
            confirm_password = st.text_input(
                "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password", placeholder="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
            )

        register_button = st.form_submit_button(
            "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", type="primary", use_container_width=True
        )

        if register_button:
            # Validation
            errors = []

            if not new_username:
                errors.append("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
            elif len(new_username) < 3:
                errors.append("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")

            if not new_password:
                errors.append("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")
            elif len(new_password) < 6:
                errors.append("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")

            if new_password != confirm_password:
                errors.append("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")

            if errors:
                for error in errors:
                    st.error(error)
                return

            # Attempt registration
            if register_user(new_username, new_password):
                st.success(f"‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ '{new_username}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
            else:
                st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")


def render_main_app():
    """Render main application interface"""
    # Sidebar navigation
    with st.sidebar:
        render_sidebar()

        # User info
        st.markdown("---")
        username = st.session_state.get(app_config.SESSION_KEYS["username"], "Guest")
        role = st.session_state.get(app_config.SESSION_KEYS["user_role"], "")

        st.markdown(f"**‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:** {username}")
        st.markdown(f"**‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó:** {role}")

        # Logout button
        st.markdown("---")
        if st.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", type="secondary", use_container_width=True):
            logout()
            st.rerun()

    # Main content area
    page_selection = st.session_state.get("page_selection", "Dashboard")

    # Route to appropriate page
    if page_selection == "Dashboard":
        enhanced_dashboard.app()
    elif page_selection == "‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå":
        projects.app()
    elif page_selection == "‡∏á‡∏≤‡∏ô":
        tasks.app()
    elif page_selection == "Gantt Chart":
        gantt_chart.app()
    elif page_selection == "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô":
        render_reports_page()
    elif page_selection == "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤":
        render_settings_page()


def render_reports_page():
    """Render reports page (placeholder)"""
    st.title("üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
    st.info("‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")

    st.subheader("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÑ‡∏ß‡πâ")
    reports = [
        "üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå",
        "üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡∏°",
        "üìÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤",
        "üí∞ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì",
        "üìã ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
    ]

    for report in reports:
        st.markdown(f"- {report}")


def render_settings_page():
    """Render settings page (placeholder)"""
    st.title("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    st.info("‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")


def main():
    """Main application entry point"""
    # Initialize app
    initialize_app()
    initialize_session_state()

    # Check authentication
    if not st.session_state[app_config.SESSION_KEYS["logged_in"]]:
        render_login_page()
    else:
        render_main_app()


if __name__ == "__main__":
    main()
