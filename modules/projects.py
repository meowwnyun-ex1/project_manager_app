#!/usr/bin/env python3
"""
modules/projects.py
Project Management for DENSO Project Manager Pro
"""
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, date, timedelta
from typing import Dict, List, Any, Optional
import logging

from utils.error_handler import safe_execute, handle_error, validate_input
from utils.ui_components import UIComponents

logger = logging.getLogger(__name__)


class ProjectManager:
    """Project management functionality"""

    def __init__(self, db_manager):
        self.db = db_manager
        self.ui = UIComponents()

    def get_all_projects(self, filters: Dict[str, Any] = None) -> List[Dict[str, Any]]:
        """Get all projects with optional filters"""
        try:
            query = """
            SELECT p.ProjectID, p.Name, p.Description, p.StartDate, p.EndDate,
                   p.Status, p.Priority, p.Budget, p.ActualCost, p.CompletionPercentage,
                   p.ClientName, p.CreatedDate, p.UpdatedDate,
                   u.FirstName + ' ' + u.LastName as ManagerName
            FROM Projects p
            LEFT JOIN Users u ON p.ManagerID = u.UserID
            WHERE 1=1
            """

            params = []

            if filters:
                if filters.get("status") and filters["status"] != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                    query += " AND p.Status = ?"
                    params.append(filters["status"])

                if filters.get("priority") and filters["priority"] != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                    query += " AND p.Priority = ?"
                    params.append(filters["priority"])

                if filters.get("manager_id"):
                    query += " AND p.ManagerID = ?"
                    params.append(filters["manager_id"])

            query += " ORDER BY p.UpdatedDate DESC"

            return self.db.execute_query(query, tuple(params) if params else None)

        except Exception as e:
            logger.error(f"Error getting projects: {e}")
            return []

    def get_project_by_id(self, project_id: int) -> Optional[Dict[str, Any]]:
        """Get project by ID"""
        try:
            query = """
            SELECT p.*, u.FirstName + ' ' + u.LastName as ManagerName
            FROM Projects p
            LEFT JOIN Users u ON p.ManagerID = u.UserID
            WHERE p.ProjectID = ?
            """

            result = self.db.execute_query(query, (project_id,))
            return result[0] if result else None

        except Exception as e:
            logger.error(f"Error getting project {project_id}: {e}")
            return None

    def create_project(self, project_data: Dict[str, Any]) -> bool:
        """Create new project"""
        try:
            # Validate required fields
            required_fields = [
                "Name",
                "Description",
                "StartDate",
                "EndDate",
                "ManagerID",
            ]
            for field in required_fields:
                if not project_data.get(field):
                    st.error(f"‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å {field}")
                    return False

            query = """
            INSERT INTO Projects (Name, Description, StartDate, EndDate, Status, 
                                Priority, Budget, ClientName, ManagerID)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """

            params = (
                project_data["Name"],
                project_data["Description"],
                project_data["StartDate"],
                project_data["EndDate"],
                project_data.get("Status", "Planning"),
                project_data.get("Priority", "Medium"),
                project_data.get("Budget", 0),
                project_data.get("ClientName", ""),
                project_data["ManagerID"],
            )

            rows_affected = self.db.execute_non_query(query, params)

            if rows_affected > 0:
                st.success("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return True
            else:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ")
                return False

        except Exception as e:
            logger.error(f"Error creating project: {e}")
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return False

    def update_project(self, project_id: int, project_data: Dict[str, Any]) -> bool:
        """Update existing project"""
        try:
            query = """
            UPDATE Projects 
            SET Name = ?, Description = ?, StartDate = ?, EndDate = ?,
                Status = ?, Priority = ?, Budget = ?, ClientName = ?,
                ManagerID = ?, UpdatedDate = GETDATE()
            WHERE ProjectID = ?
            """

            params = (
                project_data["Name"],
                project_data["Description"],
                project_data["StartDate"],
                project_data["EndDate"],
                project_data["Status"],
                project_data["Priority"],
                project_data.get("Budget", 0),
                project_data.get("ClientName", ""),
                project_data["ManagerID"],
                project_id,
            )

            rows_affected = self.db.execute_non_query(query, params)

            if rows_affected > 0:
                st.success("‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return True
            else:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ")
                return False

        except Exception as e:
            logger.error(f"Error updating project: {e}")
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return False

    def delete_project(self, project_id: int) -> bool:
        """Delete project (soft delete)"""
        try:
            # Check if project has active tasks
            task_query = "SELECT COUNT(*) as count FROM Tasks WHERE ProjectID = ? AND Status != 'Done'"
            task_result = self.db.execute_query(task_query, (project_id,))

            if task_result and task_result[0]["count"] > 0:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏î‡πâ")
                return False

            # Update status to cancelled instead of actual delete
            query = "UPDATE Projects SET Status = 'Cancelled', UpdatedDate = GETDATE() WHERE ProjectID = ?"
            rows_affected = self.db.execute_non_query(query, (project_id,))

            if rows_affected > 0:
                st.success("‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return True
            else:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ")
                return False

        except Exception as e:
            logger.error(f"Error deleting project: {e}")
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return False

    def get_project_statistics(self, project_id: int) -> Dict[str, Any]:
        """Get project statistics"""
        try:
            query = """
            SELECT 
                COUNT(*) as total_tasks,
                SUM(CASE WHEN Status = 'Done' THEN 1 ELSE 0 END) as completed_tasks,
                SUM(CASE WHEN DueDate < GETDATE() AND Status != 'Done' THEN 1 ELSE 0 END) as overdue_tasks,
                AVG(CAST(CompletionPercentage as FLOAT)) as avg_completion
            FROM Tasks 
            WHERE ProjectID = ?
            """

            result = self.db.execute_query(query, (project_id,))
            return result[0] if result else {}

        except Exception as e:
            logger.error(f"Error getting project statistics: {e}")
            return {}

    def get_total_projects(self) -> int:
        """Get total number of projects"""
        try:
            query = "SELECT COUNT(*) as count FROM Projects WHERE Status != 'Cancelled'"
            result = self.db.execute_query(query)
            return result[0]["count"] if result else 0
        except Exception as e:
            logger.error(f"Error getting total projects: {e}")
            return 0

    def get_active_projects_count(self) -> int:
        """Get number of active projects"""
        try:
            query = "SELECT COUNT(*) as count FROM Projects WHERE Status IN ('Planning', 'In Progress')"
            result = self.db.execute_query(query)
            return result[0]["count"] if result else 0
        except Exception as e:
            logger.error(f"Error getting active projects count: {e}")
            return 0


def show_projects_page(project_manager: ProjectManager, user_manager):
    """Show projects management page"""
    ui = UIComponents()

    # Page header
    ui.render_page_header("üìÅ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", "‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", "üìÅ")

    # Sidebar filters
    with st.sidebar:
        st.markdown("### üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á")

        status_filter = st.selectbox(
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
            options=[
                "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                "Planning",
                "In Progress",
                "On Hold",
                "Completed",
                "Cancelled",
            ],
        )

        priority_filter = st.selectbox(
            "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", options=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "Low", "Medium", "High", "Critical"]
        )

        # Get managers for filter
        managers = safe_execute(
            user_manager.get_users_by_role, "Project Manager", default_return=[]
        )
        manager_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + [
            f"{m['FirstName']} {m['LastName']}" for m in managers
        ]
        manager_filter = st.selectbox("‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", options=manager_options)

        manager_id = None
        if manager_filter != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            selected_manager = next(
                (
                    m
                    for m in managers
                    if f"{m['FirstName']} {m['LastName']}" == manager_filter
                ),
                None,
            )
            if selected_manager:
                manager_id = selected_manager["UserID"]

    # Main content tabs
    tab1, tab2, tab3 = st.tabs(
        ["üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", "‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà", "üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"]
    )

    with tab1:
        show_projects_list(
            project_manager,
            {
                "status": status_filter if status_filter != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" else None,
                "priority": priority_filter if priority_filter != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" else None,
                "manager_id": manager_id,
            },
        )

    with tab2:
        user_data = st.session_state.user_data
        if user_data["Role"] in ["Admin", "Project Manager"]:
            show_create_project_form(project_manager, user_manager)
        else:
            st.error("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")

    with tab3:
        show_project_statistics(project_manager)


def show_projects_list(project_manager: ProjectManager, filters: Dict[str, Any]):
    """Show projects list with actions"""
    ui = UIComponents()

    projects = safe_execute(
        project_manager.get_all_projects, filters, default_return=[]
    )

    if not projects:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")
        return

    # Search functionality
    col1, col2 = st.columns([3, 1])
    with col1:
        search_term = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£, ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤...")

    # Filter projects by search term
    if search_term:
        filtered_projects = [
            p
            for p in projects
            if search_term.lower() in p["Name"].lower()
            or (p["ClientName"] and search_term.lower() in p["ClientName"].lower())
        ]
    else:
        filtered_projects = projects

    # Display projects
    for project in filtered_projects:
        with st.container():
            col1, col2, col3, col4 = st.columns([3, 1, 1, 1])

            with col1:
                st.markdown(f"### {project['Name']}")
                st.markdown(f"**‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** {project.get('ClientName', 'N/A')}")
                st.markdown(f"**‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:** {project.get('ManagerName', 'N/A')}")
                st.markdown(f"**‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:** {project.get('Budget', 0):,.2f} ‡∏ö‡∏≤‡∏ó")

                # Progress bar
                completion = project.get("CompletionPercentage", 0)
                ui.render_progress_bar(completion)

            with col2:
                st.markdown("**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞**")
                st.markdown(
                    ui.render_status_badge(project["Status"]), unsafe_allow_html=True
                )

                st.markdown("**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç**")
                st.markdown(
                    ui.render_priority_badge(project["Priority"]),
                    unsafe_allow_html=True,
                )

            with col3:
                st.markdown("**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà**")
                if project["StartDate"]:
                    st.markdown(f"‡πÄ‡∏£‡∏¥‡πà‡∏°: {project['StartDate'].strftime('%d/%m/%Y')}")
                if project["EndDate"]:
                    st.markdown(f"‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: {project['EndDate'].strftime('%d/%m/%Y')}")

                # Calculate days remaining
                if project["EndDate"]:
                    days_remaining = (project["EndDate"].date() - date.today()).days
                    if days_remaining < 0:
                        st.markdown(
                            f"**‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î {abs(days_remaining)} ‡∏ß‡∏±‡∏ô**",
                            unsafe_allow_html=True,
                        )
                    else:
                        st.markdown(f"‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {days_remaining} ‡∏ß‡∏±‡∏ô")

            with col4:
                user_data = st.session_state.user_data
                can_edit = user_data["Role"] in [
                    "Admin",
                    "Project Manager",
                ] or user_data["UserID"] == project.get("ManagerID")

                if can_edit:
                    if st.button("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", key=f"edit_{project['ProjectID']}"):
                        st.session_state.edit_project_id = project["ProjectID"]

                    if st.button("üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", key=f"detail_{project['ProjectID']}"):
                        st.session_state.view_project_id = project["ProjectID"]

                if user_data["Role"] == "Admin":
                    if st.button("üóëÔ∏è ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", key=f"delete_{project['ProjectID']}"):
                        if ui.render_confirmation_dialog(
                            f"‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ '{project['Name']}' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
                            f"delete_project_{project['ProjectID']}",
                        ):
                            project_manager.delete_project(project["ProjectID"])
                            st.rerun()

            st.markdown("---")

    # Handle edit project
    if "edit_project_id" in st.session_state:
        show_edit_project_modal(project_manager, st.session_state.edit_project_id)

    # Handle view project details
    if "view_project_id" in st.session_state:
        show_project_details_modal(project_manager, st.session_state.view_project_id)


def show_create_project_form(project_manager: ProjectManager, user_manager):
    """Show create project form"""
    with st.form("create_project_form"):
        st.subheader("‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà")

        col1, col2 = st.columns(2)

        with col1:
            name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ *", placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
            client_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
            status = st.selectbox(
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", options=["Planning", "In Progress", "On Hold"]
            )
            start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô *")

        with col2:
            # Get managers
            managers = safe_execute(
                user_manager.get_users_by_role, "Project Manager", default_return=[]
            )
            manager_options = {
                f"{m['FirstName']} {m['LastName']}": m["UserID"] for m in managers
            }

            if manager_options:
                selected_manager = st.selectbox(
                    "‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ *", options=list(manager_options.keys())
                )
                manager_id = manager_options[selected_manager]
            else:
                st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
                manager_id = None

            priority = st.selectbox(
                "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", options=["Low", "Medium", "High", "Critical"]
            )
            budget = st.number_input(
                "‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡∏ö‡∏≤‡∏ó)", min_value=0.0, value=0.0, step=1000.0
            )
            end_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î *")

        description = st.text_area(
            "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ *",
            height=100,
            placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
        )

        if st.form_submit_button("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", type="primary"):
            if name and description and start_date and end_date and manager_id:
                if end_date >= start_date:
                    project_data = {
                        "Name": name,
                        "Description": description,
                        "StartDate": start_date,
                        "EndDate": end_date,
                        "Status": status,
                        "Priority": priority,
                        "Budget": budget,
                        "ClientName": client_name,
                        "ManagerID": manager_id,
                    }

                    if project_manager.create_project(project_data):
                        st.rerun()
                else:
                    st.error("‚ùå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
            else:
                st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (*)")


def show_edit_project_modal(project_manager: ProjectManager, project_id: int):
    """Show edit project modal"""
    project = safe_execute(
        project_manager.get_project_by_id, project_id, default_return=None
    )

    if not project:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
        return

    with st.expander(f"‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: {project['Name']}", expanded=True):
        with st.form(f"edit_project_form_{project_id}"):
            col1, col2 = st.columns(2)

            with col1:
                name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", value=project["Name"])
                client_name = st.text_input(
                    "‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", value=project.get("ClientName", "")
                )
                status = st.selectbox(
                    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
                    options=["Planning", "In Progress", "On Hold", "Completed"],
                    index=["Planning", "In Progress", "On Hold", "Completed"].index(
                        project["Status"]
                    ),
                )
                start_date = st.date_input(
                    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", value=project["StartDate"].date()
                )

            with col2:
                priority = st.selectbox(
                    "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
                    options=["Low", "Medium", "High", "Critical"],
                    index=["Low", "Medium", "High", "Critical"].index(
                        project["Priority"]
                    ),
                )
                budget = st.number_input(
                    "‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡∏ö‡∏≤‡∏ó)", value=float(project.get("Budget", 0))
                )
                end_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value=project["EndDate"].date())
                completion = st.slider(
                    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (%)",
                    0,
                    100,
                    value=project.get("CompletionPercentage", 0),
                )

            description = st.text_area(
                "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", value=project.get("Description", "")
            )

            col1, col2 = st.columns(2)

            with col1:
                if st.form_submit_button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", type="primary"):
                    updated_data = {
                        "Name": name,
                        "Description": description,
                        "StartDate": start_date,
                        "EndDate": end_date,
                        "Status": status,
                        "Priority": priority,
                        "Budget": budget,
                        "ClientName": client_name,
                        "ManagerID": project["ManagerID"],  # Keep existing manager
                        "CompletionPercentage": completion,
                    }

                    if project_manager.update_project(project_id, updated_data):
                        del st.session_state.edit_project_id
                        st.rerun()

            with col2:
                if st.form_submit_button("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"):
                    del st.session_state.edit_project_id
                    st.rerun()


def show_project_details_modal(project_manager: ProjectManager, project_id: int):
    """Show project details modal"""
    project = safe_execute(
        project_manager.get_project_by_id, project_id, default_return=None
    )

    if not project:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
        return

    with st.expander(f"üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: {project['Name']}", expanded=True):
        ui = UIComponents()

        # Basic info
        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown("### ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
            st.markdown(f"**‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£:** {project['Name']}")
            st.markdown(f"**‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** {project.get('ClientName', 'N/A')}")
            st.markdown(f"**‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:** {project.get('ManagerName', 'N/A')}")
            st.markdown(
                f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** {ui.render_status_badge(project['Status'])}",
                unsafe_allow_html=True,
            )
            st.markdown(
                f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** {ui.render_priority_badge(project['Priority'])}",
                unsafe_allow_html=True,
            )

        with col2:
            st.markdown("### ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô")
            st.markdown(f"**‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:** {project.get('Budget', 0):,.2f} ‡∏ö‡∏≤‡∏ó")
            st.markdown(f"**‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á:** {project.get('ActualCost', 0):,.2f} ‡∏ö‡∏≤‡∏ó")
            budget_used = (
                (project.get("ActualCost", 0) / project.get("Budget", 1)) * 100
                if project.get("Budget", 0) > 0
                else 0
            )
            st.markdown(f"**‡πÉ‡∏ä‡πâ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:** {budget_used:.1f}%")

        with col3:
            st.markdown("### ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤")
            if project["StartDate"]:
                st.markdown(f"**‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:** {project['StartDate'].strftime('%d/%m/%Y')}")
            if project["EndDate"]:
                st.markdown(f"**‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:** {project['EndDate'].strftime('%d/%m/%Y')}")
                days_remaining = (project["EndDate"].date() - date.today()).days
                if days_remaining < 0:
                    st.markdown(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** ‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î {abs(days_remaining)} ‡∏ß‡∏±‡∏ô")
                else:
                    st.markdown(f"**‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤:** {days_remaining} ‡∏ß‡∏±‡∏ô")

        # Progress
        st.markdown("### ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤")
        completion = project.get("CompletionPercentage", 0)
        ui.render_progress_bar(completion)

        # Description
        st.markdown("### ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
        st.markdown(project.get("Description", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"))

        # Project statistics
        stats = safe_execute(
            project_manager.get_project_statistics, project_id, default_return={}
        )
        if stats:
            st.markdown("### ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏á‡∏≤‡∏ô")
            col1, col2, col3, col4 = st.columns(4)

            with col1:
                st.metric("‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", stats.get("total_tasks", 0))
            with col2:
                st.metric("‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", stats.get("completed_tasks", 0))
            with col3:
                st.metric("‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î", stats.get("overdue_tasks", 0))
            with col4:
                avg_completion = stats.get("avg_completion", 0) or 0
                st.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_completion:.1f}%")

        if st.button("‚ùå ‡∏õ‡∏¥‡∏î", key=f"close_detail_{project_id}"):
            del st.session_state.view_project_id
            st.rerun()


def show_project_statistics(project_manager: ProjectManager):
    """Show project statistics and charts"""
    ui = UIComponents()

    st.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")

    # Get all projects for statistics
    projects = safe_execute(project_manager.get_all_projects, default_return=[])

    if not projects:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
        return

    df = pd.DataFrame(projects)

    # Key metrics
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        total_projects = len(df)
        st.metric("‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total_projects)

    with col2:
        active_projects = len(df[df["Status"].isin(["Planning", "In Progress"])])
        st.metric("‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", active_projects)

    with col3:
        completed_projects = len(df[df["Status"] == "Completed"])
        completion_rate = (
            (completed_projects / total_projects * 100) if total_projects > 0 else 0
        )
        st.metric("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"{completion_rate:.1f}%")

    with col4:
        total_budget = df["Budget"].sum()
        st.metric("‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏ß‡∏°", f"{total_budget:,.0f} ‡∏ö‡∏≤‡∏ó")

    # Charts
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
        if len(df) > 0:
            status_counts = df["Status"].value_counts()
            fig = px.pie(
                values=status_counts.values,
                names=status_counts.index,
                title="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
            )
            st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.subheader("‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç")
        if len(df) > 0:
            priority_counts = df["Priority"].value_counts()
            fig = px.bar(
                x=priority_counts.index,
                y=priority_counts.values,
                title="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
            )
            fig.update_layout(xaxis_title="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô")
            st.plotly_chart(fig, use_container_width=True)

    # Timeline chart
    st.subheader("Timeline ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
    if len(df) > 0 and "StartDate" in df.columns and "EndDate" in df.columns:
        # Filter projects with valid dates
        timeline_df = df.dropna(subset=["StartDate", "EndDate"])

        if len(timeline_df) > 0:
            fig = go.Figure()

            for _, project in timeline_df.iterrows():
                fig.add_trace(
                    go.Scatter(
                        x=[project["StartDate"], project["EndDate"]],
                        y=[project["Name"], project["Name"]],
                        mode="lines+markers",
                        name=project["Name"],
                        line=dict(width=10),
                        hovertemplate=f"<b>{project['Name']}</b><br>"
                        + f"‡πÄ‡∏£‡∏¥‡πà‡∏°: {project['StartDate'].strftime('%d/%m/%Y')}<br>"
                        + f"‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: {project['EndDate'].strftime('%d/%m/%Y')}<br>"
                        + f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {project['Status']}<extra></extra>",
                    )
                )

            fig.update_layout(
                title="Timeline ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
                xaxis_title="‡πÄ‡∏ß‡∏•‡∏≤",
                yaxis_title="‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
                height=max(400, len(timeline_df) * 50),
            )

            st.plotly_chart(fig, use_container_width=True)

    # Budget analysis
    st.subheader("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")
    if len(df) > 0 and "Budget" in df.columns:
        col1, col2 = st.columns(2)

        with col1:
            # Budget by status
            budget_by_status = df.groupby("Status")["Budget"].sum()
            fig = px.bar(
                x=budget_by_status.index,
                y=budget_by_status.values,
                title="‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
            )
            fig.update_layout(xaxis_title="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", yaxis_title="‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡∏ö‡∏≤‡∏ó)")
            st.plotly_chart(fig, use_container_width=True)

        with col2:
            # Top 10 projects by budget
            top_projects = df.nlargest(10, "Budget")
            fig = px.bar(
                top_projects,
                x="Budget",
                y="Name",
                orientation="h",
                title="‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö",
            )
            fig.update_layout(xaxis_title="‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡∏ö‡∏≤‡∏ó)", yaxis_title="‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
            st.plotly_chart(fig, use_container_width=True)
