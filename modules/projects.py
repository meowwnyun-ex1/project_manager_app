#!/usr/bin/env python3
"""
modules/projects.py
Complete Project Management System for DENSO Project Manager Pro
"""
import logging
import streamlit as st
import pandas as pd
from typing import List, Dict, Any, Optional
from datetime import datetime, date, timedelta
from dataclasses import dataclass

logger = logging.getLogger(__name__)


@dataclass
class ProjectStatus:
    PLANNING = "Planning"
    IN_PROGRESS = "In Progress"
    ON_HOLD = "On Hold"
    COMPLETED = "Completed"
    CANCELLED = "Cancelled"


@dataclass
class ProjectPriority:
    LOW = "Low"
    MEDIUM = "Medium"
    HIGH = "High"
    CRITICAL = "Critical"


class ProjectManager:
    """Complete project management functionality"""

    def __init__(self, db_manager):
        self.db = db_manager
        self.status_options = [
            ProjectStatus.PLANNING,
            ProjectStatus.IN_PROGRESS,
            ProjectStatus.ON_HOLD,
            ProjectStatus.COMPLETED,
            ProjectStatus.CANCELLED,
        ]
        self.priority_options = [
            ProjectPriority.LOW,
            ProjectPriority.MEDIUM,
            ProjectPriority.HIGH,
            ProjectPriority.CRITICAL,
        ]

    def render_project_management(self):
        """Main project management interface"""
        st.title("üìÅ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")

        # Create tabs for different views
        tab1, tab2, tab3, tab4 = st.tabs(
            ["üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", "‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", "üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥", "üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"]
        )

        with tab1:
            self._render_projects_list()

        with tab2:
            self._render_create_project()

        with tab3:
            self._render_project_statistics()

        with tab4:
            self._render_project_search()

    def _render_projects_list(self):
        """Render projects list with filtering and actions"""
        col1, col2, col3 = st.columns([2, 1, 1])

        with col1:
            status_filter = st.selectbox(
                "üîç ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + self.status_options
            )

        with col2:
            sort_by = st.selectbox(
                "üìä ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°", ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á", "‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]
            )

        with col3:
            items_per_page = st.selectbox("üìÑ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤", [10, 25, 50, 100])

        # Get projects with filtering
        projects = self._get_projects_filtered(status_filter, sort_by)

        if projects:
            # Convert to DataFrame for better display
            df = pd.DataFrame(projects)

            # Add action buttons
            for idx, project in enumerate(projects):
                with st.expander(f"üìÅ {project['Name']} ({project['Status']})"):
                    self._render_project_detail(project, idx)

            # Pagination
            if len(projects) > items_per_page:
                self._render_pagination(len(projects), items_per_page)
        else:
            st.info("üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")

    def _render_project_detail(self, project: Dict[str, Any], index: int):
        """Render detailed project information with actions"""
        col1, col2 = st.columns([2, 1])

        with col1:
            st.markdown(
                f"**üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:** {project.get('Description', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î')}"
            )
            st.markdown(f"**üë§ ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:** {project.get('ManagerName', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}")
            st.markdown(f"**üè¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** {project.get('ClientName', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}")

            # Progress calculation
            progress = self._calculate_project_progress(project["ProjectID"])
            st.progress(progress / 100)
            st.caption(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {progress:.1f}%")

        with col2:
            # Status badge
            status_color = self._get_status_color(project["Status"])
            st.markdown(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** {status_color} {project['Status']}")

            # Priority badge
            priority_color = self._get_priority_color(project["Priority"])
            st.markdown(f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** {priority_color} {project['Priority']}")

            # Dates
            if project.get("StartDate"):
                st.markdown(f"**üìÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°:** {project['StartDate']}")
            if project.get("EndDate"):
                st.markdown(f"**üìÖ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:** {project['EndDate']}")

                # Check if overdue
                if (
                    project["EndDate"] < date.today()
                    and project["Status"] != ProjectStatus.COMPLETED
                ):
                    st.warning("‚ö†Ô∏è ‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î!")

            # Budget
            if project.get("Budget"):
                st.markdown(f"**üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:** {project['Budget']:,.2f} ‡∏ö‡∏≤‡∏ó")

        # Action buttons
        col_edit, col_tasks, col_delete = st.columns(3)

        with col_edit:
            if st.button("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", key=f"edit_{project['ProjectID']}"):
                self._show_edit_project_modal(project)

        with col_tasks:
            if st.button("üìã ‡∏á‡∏≤‡∏ô", key=f"tasks_{project['ProjectID']}"):
                st.session_state["selected_project_id"] = project["ProjectID"]
                st.switch_page("pages/tasks.py")

        with col_delete:
            if st.button("üóëÔ∏è ‡∏•‡∏ö", key=f"delete_{project['ProjectID']}"):
                self._show_delete_confirmation(project)

    def _render_create_project(self):
        """Render create new project form"""
        st.subheader("‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà")

        with st.form("create_project_form", clear_on_submit=True):
            col1, col2 = st.columns(2)

            with col1:
                name = st.text_input("üìÅ ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ *", placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
                client_name = st.text_input("üè¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô")
                start_date = st.date_input("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", value=date.today())
                status = st.selectbox("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", self.status_options, index=0)

            with col2:
                description = st.text_area(
                    "üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", height=100
                )
                budget = st.number_input(
                    "üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡∏ö‡∏≤‡∏ó)", min_value=0.0, step=1000.0
                )
                end_date = st.date_input(
                    "üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value=date.today() + timedelta(days=30)
                )
                priority = st.selectbox("‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", self.priority_options, index=1)

            # Manager selection
            managers = self._get_available_managers()
            manager_options = ["‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"] + [
                f"{m['FirstName']} {m['LastName']} ({m['Username']})" for m in managers
            ]
            selected_manager = st.selectbox("üë§ ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", manager_options)

            # Submit button
            submitted = st.form_submit_button(
                "üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", use_container_width=True, type="primary"
            )

            if submitted:
                if not name:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
                elif end_date < start_date:
                    st.error("‚ùå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°")
                else:
                    # Get manager ID
                    manager_id = None
                    if selected_manager != "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏":
                        manager_idx = manager_options.index(selected_manager) - 1
                        manager_id = managers[manager_idx]["UserID"]

                    project_data = {
                        "name": name,
                        "description": description,
                        "start_date": start_date,
                        "end_date": end_date,
                        "status": status,
                        "priority": priority,
                        "budget": budget if budget > 0 else None,
                        "client_name": client_name if client_name else None,
                        "manager_id": manager_id,
                    }

                    if self.create_project(project_data):
                        st.success("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                        st.rerun()

    def _render_project_statistics(self):
        """Render project statistics dashboard"""
        st.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")

        # Get statistics
        stats = self._get_project_statistics()

        # Key metrics
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric("üìÅ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", stats["total_projects"])

        with col2:
            st.metric("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", stats["active_projects"])

        with col3:
            st.metric("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå", stats["completed_projects"])

        with col4:
            st.metric("‚ö†Ô∏è ‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î", stats["overdue_projects"])

        # Charts
        col1, col2 = st.columns(2)

        with col1:
            # Status distribution pie chart
            if stats["status_distribution"]:
                st.subheader("üìä ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
                df_status = pd.DataFrame(
                    list(stats["status_distribution"].items()),
                    columns=["Status", "Count"],
                )
                st.bar_chart(df_status.set_index("Status"))

        with col2:
            # Priority distribution
            if stats["priority_distribution"]:
                st.subheader("‚ö° ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç")
                df_priority = pd.DataFrame(
                    list(stats["priority_distribution"].items()),
                    columns=["Priority", "Count"],
                )
                st.bar_chart(df_priority.set_index("Priority"))

        # Recent projects table
        st.subheader("üìÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        recent_projects = self._get_recent_projects(5)
        if recent_projects:
            df_recent = pd.DataFrame(recent_projects)
            st.dataframe(
                df_recent[["Name", "Status", "Priority", "CreatedDate"]],
                use_container_width=True,
            )

    def _render_project_search(self):
        """Render advanced project search"""
        st.subheader("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")

        with st.form("search_form"):
            col1, col2 = st.columns(2)

            with col1:
                search_text = st.text_input(
                    "üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£, ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î, ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"
                )
                status_search = st.multiselect("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", self.status_options)
                priority_search = st.multiselect("‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", self.priority_options)

            with col2:
                date_from = st.date_input(
                    "üìÖ ‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=date.today() - timedelta(days=365)
                )
                date_to = st.date_input("üìÖ ‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=date.today())
                budget_range = st.slider(
                    "üí∞ ‡∏ä‡πà‡∏ß‡∏á‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡∏ö‡∏≤‡∏ó)", 0, 10000000, (0, 1000000), step=50000
                )

            search_clicked = st.form_submit_button("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", use_container_width=True)

        if search_clicked:
            results = self._search_projects(
                search_text,
                status_search,
                priority_search,
                date_from,
                date_to,
                budget_range,
            )

            if results:
                st.success(f"‚úÖ ‡∏û‡∏ö {len(results)} ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
                for project in results:
                    with st.expander(f"üìÅ {project['Name']}"):
                        self._render_project_detail(project, 0)
            else:
                st.info("üìù ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")

    def create_project(self, project_data: Dict[str, Any]) -> bool:
        """Create new project"""
        try:
            query = """
                INSERT INTO Projects (Name, Description, StartDate, EndDate, Status, Priority, Budget, ClientName, ManagerID)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """
            self.db.execute_non_query(
                query,
                (
                    project_data["name"],
                    project_data["description"],
                    project_data["start_date"],
                    project_data["end_date"],
                    project_data["status"],
                    project_data["priority"],
                    project_data["budget"],
                    project_data["client_name"],
                    project_data["manager_id"],
                ),
            )

            logger.info(f"Project '{project_data['name']}' created successfully")
            return True

        except Exception as e:
            logger.error(f"Error creating project: {e}")
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            return False

    def update_project(self, project_id: int, project_data: Dict[str, Any]) -> bool:
        """Update existing project"""
        try:
            query = """
                UPDATE Projects SET 
                    Name = ?, Description = ?, StartDate = ?, EndDate = ?, 
                    Status = ?, Priority = ?, Budget = ?, ClientName = ?, ManagerID = ?
                WHERE ProjectID = ?
            """
            self.db.execute_non_query(
                query,
                (
                    project_data["name"],
                    project_data["description"],
                    project_data["start_date"],
                    project_data["end_date"],
                    project_data["status"],
                    project_data["priority"],
                    project_data["budget"],
                    project_data["client_name"],
                    project_data["manager_id"],
                    project_id,
                ),
            )

            logger.info(f"Project ID {project_id} updated successfully")
            return True

        except Exception as e:
            logger.error(f"Error updating project: {e}")
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            return False

    def delete_project(self, project_id: int) -> bool:
        """Delete project (with cascade considerations)"""
        try:
            # Check for existing tasks
            task_count = self.db.execute_scalar(
                "SELECT COUNT(*) FROM Tasks WHERE ProjectID = ?", (project_id,)
            )

            if task_count > 0:
                st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ {task_count} ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
                return False

            # Delete project
            self.db.execute_non_query(
                "DELETE FROM Projects WHERE ProjectID = ?", (project_id,)
            )

            logger.info(f"Project ID {project_id} deleted successfully")
            return True

        except Exception as e:
            logger.error(f"Error deleting project: {e}")
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            return False

    def _get_projects_filtered(
        self, status_filter: str, sort_by: str
    ) -> List[Dict[str, Any]]:
        """Get projects with filtering and sorting"""
        try:
            base_query = """
                SELECT p.*, 
                       u.FirstName + ' ' + u.LastName as ManagerName,
                       u.Username as ManagerUsername
                FROM Projects p
                LEFT JOIN Users u ON p.ManagerID = u.UserID
            """

            where_clause = ""
            params = []

            if status_filter != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                where_clause = "WHERE p.Status = ?"
                params.append(status_filter)

            # Add sorting
            order_clause = ""
            if sort_by == "‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£":
                order_clause = "ORDER BY p.Name"
            elif sort_by == "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á":
                order_clause = "ORDER BY p.EndDate"
            elif sort_by == "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞":
                order_clause = "ORDER BY p.Status"
            else:  # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
                order_clause = "ORDER BY p.CreatedDate DESC"

            query = f"{base_query} {where_clause} {order_clause}"

            return self.db.execute_query(query, tuple(params))

        except Exception as e:
            logger.error(f"Error getting filtered projects: {e}")
            return []

    def _get_available_managers(self) -> List[Dict[str, Any]]:
        """Get list of users who can be project managers"""
        try:
            return self.db.execute_query(
                """
                SELECT UserID, Username, FirstName, LastName, Role
                FROM Users 
                WHERE IsActive = 1 AND Role IN ('Admin', 'Project Manager', 'Team Lead')
                ORDER BY FirstName, LastName
            """
            )
        except Exception as e:
            logger.error(f"Error getting managers: {e}")
            return []

    def _calculate_project_progress(self, project_id: int) -> float:
        """Calculate project progress based on completed tasks"""
        try:
            total_tasks = (
                self.db.execute_scalar(
                    "SELECT COUNT(*) FROM Tasks WHERE ProjectID = ?", (project_id,)
                )
                or 0
            )

            if total_tasks == 0:
                return 0.0

            completed_tasks = (
                self.db.execute_scalar(
                    "SELECT COUNT(*) FROM Tasks WHERE ProjectID = ? AND Status = 'Done'",
                    (project_id,),
                )
                or 0
            )

            return (completed_tasks / total_tasks) * 100

        except Exception as e:
            logger.error(f"Error calculating progress: {e}")
            return 0.0

    def _get_project_statistics(self) -> Dict[str, Any]:
        """Get comprehensive project statistics"""
        try:
            stats = {}

            # Basic counts
            stats["total_projects"] = (
                self.db.execute_scalar("SELECT COUNT(*) FROM Projects") or 0
            )
            stats["active_projects"] = (
                self.db.execute_scalar(
                    "SELECT COUNT(*) FROM Projects WHERE Status IN ('Planning', 'In Progress')"
                )
                or 0
            )
            stats["completed_projects"] = (
                self.db.execute_scalar(
                    "SELECT COUNT(*) FROM Projects WHERE Status = 'Completed'"
                )
                or 0
            )
            stats["overdue_projects"] = (
                self.db.execute_scalar(
                    "SELECT COUNT(*) FROM Projects WHERE EndDate < GETDATE() AND Status != 'Completed'"
                )
                or 0
            )

            # Status distribution
            status_data = self.db.execute_query(
                "SELECT Status, COUNT(*) as Count FROM Projects GROUP BY Status"
            )
            stats["status_distribution"] = {
                row["Status"]: row["Count"] for row in status_data
            }

            # Priority distribution
            priority_data = self.db.execute_query(
                "SELECT Priority, COUNT(*) as Count FROM Projects GROUP BY Priority"
            )
            stats["priority_distribution"] = {
                row["Priority"]: row["Count"] for row in priority_data
            }

            return stats

        except Exception as e:
            logger.error(f"Error getting project statistics: {e}")
            return {}

    def _get_recent_projects(self, limit: int = 10) -> List[Dict[str, Any]]:
        """Get most recently created projects"""
        try:
            return self.db.execute_query(
                "SELECT TOP (?) Name, Status, Priority, CreatedDate FROM Projects ORDER BY CreatedDate DESC",
                (limit,),
            )
        except Exception as e:
            logger.error(f"Error getting recent projects: {e}")
            return []

    def _search_projects(
        self,
        search_text: str,
        status_filter: List[str],
        priority_filter: List[str],
        date_from: date,
        date_to: date,
        budget_range: tuple,
    ) -> List[Dict[str, Any]]:
        """Advanced project search"""
        try:
            where_conditions = []
            params = []

            # Text search
            if search_text:
                where_conditions.append(
                    "(p.Name LIKE ? OR p.Description LIKE ? OR p.ClientName LIKE ?)"
                )
                search_param = f"%{search_text}%"
                params.extend([search_param, search_param, search_param])

            # Status filter
            if status_filter:
                placeholders = ",".join("?" * len(status_filter))
                where_conditions.append(f"p.Status IN ({placeholders})")
                params.extend(status_filter)

            # Priority filter
            if priority_filter:
                placeholders = ",".join("?" * len(priority_filter))
                where_conditions.append(f"p.Priority IN ({placeholders})")
                params.extend(priority_filter)

            # Date range
            where_conditions.append("p.CreatedDate BETWEEN ? AND ?")
            params.extend([date_from, date_to])

            # Budget range
            if budget_range[1] > 0:
                where_conditions.append(
                    "(p.Budget BETWEEN ? AND ? OR p.Budget IS NULL)"
                )
                params.extend([budget_range[0], budget_range[1]])

            where_clause = (
                "WHERE " + " AND ".join(where_conditions) if where_conditions else ""
            )

            query = f"""
                SELECT p.*, u.FirstName + ' ' + u.LastName as ManagerName
                FROM Projects p
                LEFT JOIN Users u ON p.ManagerID = u.UserID
                {where_clause}
                ORDER BY p.CreatedDate DESC
            """

            return self.db.execute_query(query, tuple(params))

        except Exception as e:
            logger.error(f"Error searching projects: {e}")
            return []

    def _get_status_color(self, status: str) -> str:
        """Get color emoji for project status"""
        colors = {
            ProjectStatus.PLANNING: "üü°",
            ProjectStatus.IN_PROGRESS: "üîµ",
            ProjectStatus.ON_HOLD: "üü†",
            ProjectStatus.COMPLETED: "üü¢",
            ProjectStatus.CANCELLED: "üî¥",
        }
        return colors.get(status, "‚ö™")

    def _get_priority_color(self, priority: str) -> str:
        """Get color emoji for project priority"""
        colors = {
            ProjectPriority.LOW: "üü¢",
            ProjectPriority.MEDIUM: "üü°",
            ProjectPriority.HIGH: "üü†",
            ProjectPriority.CRITICAL: "üî¥",
        }
        return colors.get(priority, "‚ö™")

    def _show_edit_project_modal(self, project: Dict[str, Any]):
        """Show edit project modal"""
        st.session_state[f'edit_project_{project["ProjectID"]}'] = True

        with st.form(f"edit_project_form_{project['ProjectID']}"):
            st.subheader(f"‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: {project['Name']}")

            col1, col2 = st.columns(2)

            with col1:
                name = st.text_input("üìÅ ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", value=project["Name"])
                client_name = st.text_input(
                    "üè¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", value=project.get("ClientName", "")
                )
                start_date = st.date_input(
                    "üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", value=project.get("StartDate", date.today())
                )
                status = st.selectbox(
                    "üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
                    self.status_options,
                    index=self.status_options.index(project["Status"]),
                )

            with col2:
                description = st.text_area(
                    "üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", value=project.get("Description", "")
                )
                budget = st.number_input(
                    "üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", value=float(project.get("Budget", 0))
                )
                end_date = st.date_input(
                    "üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value=project.get("EndDate", date.today())
                )
                priority = st.selectbox(
                    "‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
                    self.priority_options,
                    index=self.priority_options.index(project["Priority"]),
                )

            # Manager selection
            managers = self._get_available_managers()
            manager_options = ["‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"] + [
                f"{m['FirstName']} {m['LastName']} ({m['Username']})" for m in managers
            ]

            current_manager_idx = 0
            if project.get("ManagerID"):
                for idx, manager in enumerate(managers):
                    if manager["UserID"] == project["ManagerID"]:
                        current_manager_idx = idx + 1
                        break

            selected_manager = st.selectbox(
                "üë§ ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", manager_options, index=current_manager_idx
            )

            col_save, col_cancel = st.columns(2)

            with col_save:
                if st.form_submit_button(
                    "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", use_container_width=True, type="primary"
                ):
                    # Get manager ID
                    manager_id = None
                    if selected_manager != "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏":
                        manager_idx = manager_options.index(selected_manager) - 1
                        manager_id = managers[manager_idx]["UserID"]

                    project_data = {
                        "name": name,
                        "description": description,
                        "start_date": start_date,
                        "end_date": end_date,
                        "status": status,
                        "priority": priority,
                        "budget": budget if budget > 0 else None,
                        "client_name": client_name if client_name else None,
                        "manager_id": manager_id,
                    }

                    if self.update_project(project["ProjectID"], project_data):
                        st.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                        st.rerun()

            with col_cancel:
                if st.form_submit_button("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", use_container_width=True):
                    del st.session_state[f'edit_project_{project["ProjectID"]}']
                    st.rerun()

    def _show_delete_confirmation(self, project: Dict[str, Any]):
        """Show delete confirmation dialog"""
        st.warning(f"‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ '{project['Name']}' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")

        col_confirm, col_cancel = st.columns(2)

        with col_confirm:
            if st.button(
                "üóëÔ∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö",
                key=f"confirm_delete_{project['ProjectID']}",
                type="primary",
            ):
                if self.delete_project(project["ProjectID"]):
                    st.success("‚úÖ ‡∏•‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                    st.rerun()

        with col_cancel:
            if st.button("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", key=f"cancel_delete_{project['ProjectID']}"):
                st.rerun()

    def _render_pagination(self, total_items: int, items_per_page: int):
        """Render pagination controls"""
        total_pages = (total_items + items_per_page - 1) // items_per_page

        if "current_page" not in st.session_state:
            st.session_state.current_page = 1

        col1, col2, col3 = st.columns([1, 2, 1])

        with col1:
            if st.button("‚óÄÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤") and st.session_state.current_page > 1:
                st.session_state.current_page -= 1
                st.rerun()

        with col2:
            st.markdown(
                f"<div style='text-align: center'>‡∏´‡∏ô‡πâ‡∏≤ {st.session_state.current_page} ‡∏à‡∏≤‡∏Å {total_pages}</div>",
                unsafe_allow_html=True,
            )

        with col3:
            if st.button("‚ñ∂Ô∏è ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ") and st.session_state.current_page < total_pages:
                st.session_state.current_page += 1
                st.rerun()
