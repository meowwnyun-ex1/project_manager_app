#!/usr/bin/env python3
"""
modules/analytics.py
SDX Project Manager - Enterprise Analytics & Reporting System
Advanced data analytics with real-time metrics and comprehensive reporting
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime, timedelta, date
from typing import Dict, List, Any, Optional, Tuple
import logging
from dataclasses import dataclass
from enum import Enum
import json

logger = logging.getLogger(__name__)


class ReportType(Enum):
    """‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"""

    PROJECT_OVERVIEW = "project_overview"
    TASK_PERFORMANCE = "task_performance"
    RESOURCE_UTILIZATION = "resource_utilization"
    BUDGET_ANALYSIS = "budget_analysis"
    TEAM_PRODUCTIVITY = "team_productivity"
    TIMELINE_ANALYSIS = "timeline_analysis"
    QUALITY_METRICS = "quality_metrics"
    EXECUTIVE_SUMMARY = "executive_summary"


@dataclass
class MetricCard:
    """‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î"""

    title: str
    value: Any
    delta: Optional[float] = None
    format_type: str = "number"  # number, percentage, currency, duration
    color: str = "blue"
    icon: str = "üìä"


@dataclass
class ChartConfig:
    """‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥"""

    chart_type: str
    title: str
    x_column: str
    y_column: str
    color_column: Optional[str] = None
    additional_params: Dict[str, Any] = None


class AnalyticsEngine:
    """‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""

    def __init__(self, db_manager):
        self.db = db_manager
        self.color_palette = [
            "#1f77b4",
            "#ff7f0e",
            "#2ca02c",
            "#d62728",
            "#9467bd",
            "#8c564b",
            "#e377c2",
            "#7f7f7f",
            "#bcbd22",
            "#17becf",
        ]

    def get_project_overview_metrics(self) -> List[MetricCard]:
        """‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"""
        try:
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            projects_query = """
            SELECT 
                COUNT(*) as total_projects,
                SUM(CASE WHEN Status = 'Active' THEN 1 ELSE 0 END) as active_projects,
                SUM(CASE WHEN Status = 'Completed' THEN 1 ELSE 0 END) as completed_projects,
                SUM(CASE WHEN Status = 'On Hold' THEN 1 ELSE 0 END) as on_hold_projects,
                AVG(CASE WHEN Budget > 0 THEN Budget ELSE NULL END) as avg_budget,
                SUM(CASE WHEN Budget > 0 THEN Budget ELSE 0 END) as total_budget,
                SUM(CASE WHEN ActualCost > 0 THEN ActualCost ELSE 0 END) as total_spent
            FROM Projects
            """
            project_data = self.db.fetch_one(projects_query)

            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô
            tasks_query = """
            SELECT 
                COUNT(*) as total_tasks,
                SUM(CASE WHEN Status = 'Done' THEN 1 ELSE 0 END) as completed_tasks,
                SUM(CASE WHEN Status = 'In Progress' THEN 1 ELSE 0 END) as in_progress_tasks,
                SUM(CASE WHEN Status = 'To Do' THEN 1 ELSE 0 END) as todo_tasks,
                AVG(CASE WHEN Progress > 0 THEN Progress ELSE NULL END) as avg_progress
            FROM Tasks
            """
            task_data = self.db.fetch_one(tasks_query)

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
            completion_rate = (
                (task_data["completed_tasks"] / task_data["total_tasks"] * 100)
                if task_data["total_tasks"] > 0
                else 0
            )
            budget_utilization = (
                (project_data["total_spent"] / project_data["total_budget"] * 100)
                if project_data["total_budget"] > 0
                else 0
            )

            return [
                MetricCard(
                    title="‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                    value=project_data["total_projects"],
                    icon="üìÅ",
                    color="blue",
                ),
                MetricCard(
                    title="‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô",
                    value=project_data["active_projects"],
                    icon="üöÄ",
                    color="green",
                ),
                MetricCard(
                    title="‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏á‡∏≤‡∏ô",
                    value=completion_rate,
                    format_type="percentage",
                    icon="‚úÖ",
                    color="success",
                ),
                MetricCard(
                    title="‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì",
                    value=budget_utilization,
                    format_type="percentage",
                    icon="üí∞",
                    color="warning" if budget_utilization > 80 else "info",
                ),
            ]

        except Exception as e:
            logger.error(f"Error getting overview metrics: {e}")
            return []

    def get_project_performance_data(self) -> pd.DataFrame:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"""
        try:
            query = """
            SELECT 
                p.ProjectName,
                p.Status,
                p.Priority,
                p.Budget,
                p.ActualCost,
                p.StartDate,
                p.EndDate,
                COUNT(t.TaskID) as total_tasks,
                SUM(CASE WHEN t.Status = 'Done' THEN 1 ELSE 0 END) as completed_tasks,
                AVG(t.Progress) as avg_progress,
                CONCAT(u.FirstName, ' ', u.LastName) as manager_name
            FROM Projects p
            LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID
            LEFT JOIN Users u ON p.ManagerID = u.UserID
            GROUP BY p.ProjectID, p.ProjectName, p.Status, p.Priority, 
                     p.Budget, p.ActualCost, p.StartDate, p.EndDate,
                     u.FirstName, u.LastName
            ORDER BY p.CreatedDate DESC
            """

            df = pd.DataFrame(self.db.fetch_all(query))

            if not df.empty:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                df["completion_rate"] = (
                    df["completed_tasks"] / df["total_tasks"] * 100
                ).fillna(0)
                df["budget_variance"] = (
                    (df["ActualCost"] - df["Budget"]) / df["Budget"] * 100
                ).fillna(0)
                df["is_overbudget"] = df["budget_variance"] > 0

                # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                df["StartDate"] = pd.to_datetime(df["StartDate"])
                df["EndDate"] = pd.to_datetime(df["EndDate"])
                df["duration_days"] = (df["EndDate"] - df["StartDate"]).dt.days

            return df

        except Exception as e:
            logger.error(f"Error getting project performance data: {e}")
            return pd.DataFrame()

    def get_task_analytics_data(self) -> pd.DataFrame:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏á‡∏≤‡∏ô"""
        try:
            query = """
            SELECT 
                t.TaskTitle,
                t.Status,
                t.Priority,
                t.Progress,
                t.EstimatedHours,
                t.ActualHours,
                t.DueDate,
                t.CreatedDate,
                p.ProjectName,
                CONCAT(u.FirstName, ' ', u.LastName) as assigned_user
            FROM Tasks t
            LEFT JOIN Projects p ON t.ProjectID = p.ProjectID
            LEFT JOIN Users u ON t.AssignedUserID = u.UserID
            ORDER BY t.CreatedDate DESC
            """

            df = pd.DataFrame(self.db.fetch_all(query))

            if not df.empty:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏á‡∏≤‡∏ô
                df["time_variance"] = df["ActualHours"] - df["EstimatedHours"]
                df["efficiency"] = (
                    df["EstimatedHours"] / df["ActualHours"] * 100
                ).fillna(100)
                df["is_overdue"] = pd.to_datetime(df["DueDate"]) < datetime.now()

                # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                df["DueDate"] = pd.to_datetime(df["DueDate"])
                df["CreatedDate"] = pd.to_datetime(df["CreatedDate"])
                df["age_days"] = (datetime.now() - df["CreatedDate"]).dt.days

            return df

        except Exception as e:
            logger.error(f"Error getting task analytics data: {e}")
            return pd.DataFrame()

    def create_project_status_chart(self, df: pd.DataFrame) -> go.Figure:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"""
        if df.empty:
            return go.Figure()

        status_counts = df["Status"].value_counts()

        fig = go.Figure(
            data=[
                go.Pie(
                    labels=status_counts.index,
                    values=status_counts.values,
                    hole=0.4,
                    marker_colors=self.color_palette[: len(status_counts)],
                )
            ]
        )

        fig.update_layout(
            title="‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
            font=dict(family="Sarabun", size=14),
            showlegend=True,
            height=400,
        )

        return fig

    def create_budget_analysis_chart(self, df: pd.DataFrame) -> go.Figure:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"""
        if df.empty:
            return go.Figure()

        fig = make_subplots(
            rows=1,
            cols=2,
            subplot_titles=("‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì vs ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á", "‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"),
            specs=[[{"secondary_y": False}, {"secondary_y": False}]],
        )

        # ‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
        fig.add_trace(
            go.Bar(
                name="‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì",
                x=df["ProjectName"],
                y=df["Budget"],
                marker_color="lightblue",
            ),
            row=1,
            col=1,
        )

        fig.add_trace(
            go.Bar(
                name="‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á",
                x=df["ProjectName"],
                y=df["ActualCost"],
                marker_color="orange",
            ),
            row=1,
            col=1,
        )

        # ‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô
        colors = ["red" if x > 0 else "green" for x in df["budget_variance"]]
        fig.add_trace(
            go.Bar(
                name="‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô",
                x=df["ProjectName"],
                y=df["budget_variance"],
                marker_color=colors,
            ),
            row=1,
            col=2,
        )

        fig.update_layout(
            title="‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
            font=dict(family="Sarabun", size=12),
            height=500,
        )

        return fig

    def create_task_progress_chart(self, df: pd.DataFrame) -> go.Figure:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô"""
        if df.empty:
            return go.Figure()

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á stacked bar chart ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        progress_by_project = (
            df.groupby(["ProjectName", "Status"]).size().unstack(fill_value=0)
        )

        fig = go.Figure()

        status_colors = {
            "To Do": "#ff7f7f",
            "In Progress": "#ffbb78",
            "Done": "#90ee90",
        }

        for status in progress_by_project.columns:
            fig.add_trace(
                go.Bar(
                    name=status,
                    x=progress_by_project.index,
                    y=progress_by_project[status],
                    marker_color=status_colors.get(status, "#1f77b4"),
                )
            )

        fig.update_layout(
            title="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
            xaxis_title="‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
            yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô",
            barmode="stack",
            font=dict(family="Sarabun", size=12),
            height=400,
        )

        return fig

    def create_team_productivity_chart(self) -> go.Figure:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡∏°"""
        try:
            query = """
            SELECT 
                CONCAT(u.FirstName, ' ', u.LastName) as user_name,
                u.Department,
                COUNT(t.TaskID) as total_tasks,
                SUM(CASE WHEN t.Status = 'Done' THEN 1 ELSE 0 END) as completed_tasks,
                AVG(t.Progress) as avg_progress,
                SUM(t.ActualHours) as total_hours
            FROM Users u
            LEFT JOIN Tasks t ON u.UserID = t.AssignedUserID
            WHERE u.IsActive = 1
            GROUP BY u.UserID, u.FirstName, u.LastName, u.Department
            HAVING COUNT(t.TaskID) > 0
            ORDER BY completed_tasks DESC
            """

            df = pd.DataFrame(self.db.fetch_all(query))

            if df.empty:
                return go.Figure()

            df["completion_rate"] = (
                df["completed_tasks"] / df["total_tasks"] * 100
            ).fillna(0)

            fig = make_subplots(
                rows=2,
                cols=2,
                subplot_titles=(
                    "‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
                    "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
                    "‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
                    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
                ),
                specs=[
                    [{"type": "bar"}, {"type": "bar"}],
                    [{"type": "bar"}, {"type": "bar"}],
                ],
            )

            # ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            fig.add_trace(
                go.Bar(
                    x=df["user_name"],
                    y=df["completed_tasks"],
                    name="‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à",
                    marker_color="green",
                ),
                row=1,
                col=1,
            )

            # ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            fig.add_trace(
                go.Bar(
                    x=df["user_name"],
                    y=df["completion_rate"],
                    name="‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                    marker_color="blue",
                ),
                row=1,
                col=2,
            )

            # ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            fig.add_trace(
                go.Bar(
                    x=df["user_name"],
                    y=df["total_hours"],
                    name="‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
                    marker_color="orange",
                ),
                row=2,
                col=1,
            )

            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            fig.add_trace(
                go.Bar(
                    x=df["user_name"],
                    y=df["avg_progress"],
                    name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤",
                    marker_color="purple",
                ),
                row=2,
                col=2,
            )

            fig.update_layout(
                title="‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô",
                font=dict(family="Sarabun", size=10),
                height=600,
                showlegend=False,
            )

            return fig

        except Exception as e:
            logger.error(f"Error creating team productivity chart: {e}")
            return go.Figure()

    def create_timeline_analysis(self) -> go.Figure:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå"""
        try:
            query = """
            SELECT 
                p.ProjectName,
                p.StartDate,
                p.EndDate,
                p.Status,
                p.Priority
            FROM Projects p
            WHERE p.StartDate IS NOT NULL AND p.EndDate IS NOT NULL
            ORDER BY p.StartDate
            """

            df = pd.DataFrame(self.db.fetch_all(query))

            if df.empty:
                return go.Figure()

            df["StartDate"] = pd.to_datetime(df["StartDate"])
            df["EndDate"] = pd.to_datetime(df["EndDate"])
            df["Duration"] = (df["EndDate"] - df["StartDate"]).dt.days

            # ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            status_colors = {
                "Active": "blue",
                "Completed": "green",
                "On Hold": "orange",
                "Cancelled": "red",
            }

            fig = go.Figure()

            for i, row in df.iterrows():
                fig.add_trace(
                    go.Scatter(
                        x=[row["StartDate"], row["EndDate"]],
                        y=[i, i],
                        mode="lines+markers",
                        name=row["ProjectName"],
                        line=dict(
                            color=status_colors.get(row["Status"], "gray"), width=8
                        ),
                        marker=dict(size=10),
                        hovertemplate=f"<b>{row['ProjectName']}</b><br>"
                        + f"‡πÄ‡∏£‡∏¥‡πà‡∏°: {row['StartDate'].strftime('%Y-%m-%d')}<br>"
                        + f"‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: {row['EndDate'].strftime('%Y-%m-%d')}<br>"
                        + f"‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: {row['Duration']} ‡∏ß‡∏±‡∏ô<br>"
                        + f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {row['Status']}<extra></extra>",
                    )
                )

            fig.update_layout(
                title="‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
                xaxis_title="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
                yaxis=dict(
                    tickmode="array",
                    tickvals=list(range(len(df))),
                    ticktext=df["ProjectName"].tolist(),
                ),
                font=dict(family="Sarabun", size=12),
                height=max(400, len(df) * 50),
                showlegend=False,
            )

            return fig

        except Exception as e:
            logger.error(f"Error creating timeline analysis: {e}")
            return go.Figure()

    def generate_executive_summary(self) -> Dict[str, Any]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£"""
        try:
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
            project_data = self.get_project_performance_data()
            task_data = self.get_task_analytics_data()

            summary = {
                "total_projects": len(project_data),
                "active_projects": len(
                    project_data[project_data["Status"] == "Active"]
                ),
                "completed_projects": len(
                    project_data[project_data["Status"] == "Completed"]
                ),
                "total_budget": (
                    project_data["Budget"].sum() if not project_data.empty else 0
                ),
                "total_spent": (
                    project_data["ActualCost"].sum() if not project_data.empty else 0
                ),
                "budget_utilization": 0,
                "avg_completion_rate": (
                    project_data["completion_rate"].mean()
                    if not project_data.empty
                    else 0
                ),
                "overdue_tasks": (
                    len(task_data[task_data["is_overdue"]])
                    if not task_data.empty
                    else 0
                ),
                "total_tasks": len(task_data),
                "key_insights": [],
                "recommendations": [],
            }

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
            if summary["total_budget"] > 0:
                summary["budget_utilization"] = (
                    summary["total_spent"] / summary["total_budget"]
                ) * 100

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á insights
            if summary["budget_utilization"] > 90:
                summary["key_insights"].append("‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß")
                summary["recommendations"].append("‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î")

            if summary["avg_completion_rate"] < 70:
                summary["key_insights"].append("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢")
                summary["recommendations"].append("‡∏Ñ‡∏ß‡∏£‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£")

            if summary["overdue_tasks"] > 0:
                summary["key_insights"].append(
                    f"‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î {summary['overdue_tasks']} ‡∏á‡∏≤‡∏ô"
                )
                summary["recommendations"].append("‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡πà‡∏á‡∏£‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î")

            return summary

        except Exception as e:
            logger.error(f"Error generating executive summary: {e}")
            return {}

    def export_report_data(
        self, report_type: ReportType, date_range: Tuple[date, date] = None
    ) -> pd.DataFrame:
        """‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"""
        try:
            if report_type == ReportType.PROJECT_OVERVIEW:
                return self.get_project_performance_data()
            elif report_type == ReportType.TASK_PERFORMANCE:
                return self.get_task_analytics_data()
            else:
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                return pd.DataFrame()

        except Exception as e:
            logger.error(f"Error exporting report data: {e}")
            return pd.DataFrame()


class AdvancedAnalytics:
    """‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""

    def __init__(self, analytics_engine: AnalyticsEngine):
        self.engine = analytics_engine

    def predict_project_completion(self, project_id: int) -> Dict[str, Any]:
        """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏á‡∏≤‡∏ô
            query = """
            SELECT 
                p.*,
                COUNT(t.TaskID) as total_tasks,
                SUM(CASE WHEN t.Status = 'Done' THEN 1 ELSE 0 END) as completed_tasks,
                AVG(t.Progress) as avg_progress,
                SUM(t.EstimatedHours) as total_estimated_hours,
                SUM(t.ActualHours) as total_actual_hours
            FROM Projects p
            LEFT JOIN Tasks t ON p.ProjectID = t.ProjectID
            WHERE p.ProjectID = ?
            GROUP BY p.ProjectID
            """

            data = self.engine.db.fetch_one(query, (project_id,))

            if not data:
                return {}

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            completion_rate = (
                (data["completed_tasks"] / data["total_tasks"])
                if data["total_tasks"] > 0
                else 0
            )

            # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            if completion_rate > 0 and data["EndDate"]:
                start_date = datetime.strptime(str(data["StartDate"]), "%Y-%m-%d")
                end_date = datetime.strptime(str(data["EndDate"]), "%Y-%m-%d")
                total_duration = (end_date - start_date).days

                elapsed_days = (datetime.now() - start_date).days
                estimated_remaining_days = (
                    (total_duration - elapsed_days) / completion_rate
                    if completion_rate > 0
                    else total_duration
                )
                predicted_completion = datetime.now() + timedelta(
                    days=estimated_remaining_days
                )
            else:
                predicted_completion = None

            return {
                "project_name": data["ProjectName"],
                "completion_rate": completion_rate * 100,
                "predicted_completion_date": (
                    predicted_completion.strftime("%Y-%m-%d")
                    if predicted_completion
                    else None
                ),
                "is_on_track": completion_rate >= 0.8,
                "risk_level": (
                    "Low"
                    if completion_rate >= 0.8
                    else "Medium" if completion_rate >= 0.5 else "High"
                ),
            }

        except Exception as e:
            logger.error(f"Error predicting project completion: {e}")
            return {}

    def calculate_roi_metrics(self) -> Dict[str, float]:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ROI ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô"""
        try:
            query = """
            SELECT 
                SUM(Budget) as total_budget,
                SUM(ActualCost) as total_cost,
                COUNT(*) as total_projects,
                SUM(CASE WHEN Status = 'Completed' THEN 1 ELSE 0 END) as completed_projects
            FROM Projects
            WHERE Budget > 0
            """

            data = self.engine.db.fetch_one(query)

            roi = (
                ((data["total_budget"] - data["total_cost"]) / data["total_cost"] * 100)
                if data["total_cost"] > 0
                else 0
            )
            success_rate = (
                (data["completed_projects"] / data["total_projects"] * 100)
                if data["total_projects"] > 0
                else 0
            )

            return {
                "roi_percentage": roi,
                "success_rate": success_rate,
                "cost_efficiency": (
                    (data["total_budget"] / data["total_cost"])
                    if data["total_cost"] > 0
                    else 0
                ),
                "avg_project_value": (
                    data["total_budget"] / data["total_projects"]
                    if data["total_projects"] > 0
                    else 0
                ),
            }

        except Exception as e:
            logger.error(f"Error calculating ROI metrics: {e}")
            return {}


def format_metric_value(value: Any, format_type: str) -> str:
    """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î"""
    try:
        if format_type == "percentage":
            return f"{value:.1f}%"
        elif format_type == "currency":
            return f"‡∏ø{value:,.2f}"
        elif format_type == "duration":
            return f"{int(value)} ‡∏ß‡∏±‡∏ô"
        elif format_type == "number":
            if isinstance(value, float):
                return f"{value:,.1f}"
            else:
                return f"{value:,}"
        else:
            return str(value)
    except:
        return str(value)


def display_metric_cards(metrics: List[MetricCard], cols: int = 4):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î"""
    columns = st.columns(cols)

    for i, metric in enumerate(metrics):
        with columns[i % cols]:
            formatted_value = format_metric_value(metric.value, metric.format_type)

            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (delta) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            delta_text = ""
            if metric.delta is not None:
                delta_text = f" ({metric.delta:+.1f}%)"

            st.metric(
                label=f"{metric.icon} {metric.title}",
                value=formatted_value,
                delta=delta_text if metric.delta else None,
            )


def create_analytics_dashboard(analytics_engine: AnalyticsEngine):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
    st.title("üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")

    # Sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
    with st.sidebar:
        st.subheader("üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        date_range = st.date_input(
            "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤",
            value=(datetime.now() - timedelta(days=30), datetime.now()),
            key="analytics_date_range",
        )

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        report_type = st.selectbox(
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô",
            options=[e.value for e in ReportType],
            format_func=lambda x: {
                "project_overview": "üìÅ ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
                "task_performance": "‚úÖ ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏á‡∏≤‡∏ô",
                "resource_utilization": "üë• ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£",
                "budget_analysis": "üí∞ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì",
                "team_productivity": "üöÄ ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡∏°",
                "timeline_analysis": "üìÖ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå",
                "quality_metrics": "‚≠ê ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û",
                "executive_summary": "üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£",
            }.get(x, x),
        )

        # ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", use_container_width=True):
            st.cache_data.clear()
            st.rerun()

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏´‡∏•‡∏±‡∏Å
    st.subheader("üìà ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏´‡∏•‡∏±‡∏Å")
    overview_metrics = analytics_engine.get_project_overview_metrics()

    if overview_metrics:
        display_metric_cards(overview_metrics)
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î")

    st.divider()

    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if report_type == ReportType.PROJECT_OVERVIEW.value:
        show_project_overview_report(analytics_engine)
    elif report_type == ReportType.TASK_PERFORMANCE.value:
        show_task_performance_report(analytics_engine)
    elif report_type == ReportType.BUDGET_ANALYSIS.value:
        show_budget_analysis_report(analytics_engine)
    elif report_type == ReportType.TEAM_PRODUCTIVITY.value:
        show_team_productivity_report(analytics_engine)
    elif report_type == ReportType.TIMELINE_ANALYSIS.value:
        show_timeline_analysis_report(analytics_engine)
    elif report_type == ReportType.EXECUTIVE_SUMMARY.value:
        show_executive_summary_report(analytics_engine)


def show_project_overview_report(analytics_engine: AnalyticsEngine):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"""
    st.subheader("üìÅ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
    project_data = analytics_engine.get_project_performance_data()

    if project_data.empty:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
        return

    col1, col2 = st.columns(2)

    with col1:
        # ‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
        status_chart = analytics_engine.create_project_status_chart(project_data)
        st.plotly_chart(status_chart, use_container_width=True)

    with col2:
        # ‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        progress_chart = analytics_engine.create_task_progress_chart(
            analytics_engine.get_task_analytics_data()
        )
        st.plotly_chart(progress_chart, use_container_width=True)

    # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á
    display_columns = [
        "ProjectName",
        "Status",
        "Priority",
        "completion_rate",
        "Budget",
        "ActualCost",
        "budget_variance",
        "manager_name",
    ]

    if all(col in project_data.columns for col in display_columns):
        display_data = project_data[display_columns].copy()

        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        display_data["completion_rate"] = display_data["completion_rate"].apply(
            lambda x: f"{x:.1f}%"
        )
        display_data["Budget"] = display_data["Budget"].apply(
            lambda x: f"‡∏ø{x:,.2f}" if pd.notna(x) else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
        )
        display_data["ActualCost"] = display_data["ActualCost"].apply(
            lambda x: f"‡∏ø{x:,.2f}" if pd.notna(x) else "‡∏ø0.00"
        )
        display_data["budget_variance"] = display_data["budget_variance"].apply(
            lambda x: f"{x:+.1f}%" if pd.notna(x) else "0.0%"
        )

        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        display_data.columns = [
            "‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤",
            "‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì",
            "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á",
            "‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô",
            "‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
        ]

        st.dataframe(display_data, use_container_width=True, hide_index=True)


def show_task_performance_report(analytics_engine: AnalyticsEngine):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏á‡∏≤‡∏ô"""
    st.subheader("‚úÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏á‡∏≤‡∏ô")

    task_data = analytics_engine.get_task_analytics_data()

    if task_data.empty:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô")
        return

    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏á‡∏≤‡∏ô
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        total_tasks = len(task_data)
        st.metric("üìù ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{total_tasks:,}")

    with col2:
        completed_tasks = len(task_data[task_data["Status"] == "Done"])
        st.metric("‚úÖ ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", f"{completed_tasks:,}")

    with col3:
        overdue_tasks = (
            len(task_data[task_data["is_overdue"]])
            if "is_overdue" in task_data.columns
            else 0
        )
        st.metric("‚è∞ ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î", f"{overdue_tasks:,}")

    with col4:
        avg_efficiency = (
            task_data["efficiency"].mean() if "efficiency" in task_data.columns else 100
        )
        st.metric("üìä ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_efficiency:.1f}%")

    # ‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô
    status_counts = task_data["Status"].value_counts()
    fig_status = px.pie(
        values=status_counts.values,
        names=status_counts.index,
        title="‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô",
    )
    fig_status.update_layout(font=dict(family="Sarabun"))
    st.plotly_chart(fig_status, use_container_width=True)

    # ‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏á‡∏≤‡∏ô
    priority_counts = task_data["Priority"].value_counts()
    fig_priority = px.bar(
        x=priority_counts.index,
        y=priority_counts.values,
        title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
        color=priority_counts.values,
        color_continuous_scale="Reds",
    )
    fig_priority.update_layout(
        xaxis_title="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô", font=dict(family="Sarabun")
    )
    st.plotly_chart(fig_priority, use_container_width=True)


def show_budget_analysis_report(analytics_engine: AnalyticsEngine):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"""
    st.subheader("üí∞ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")

    project_data = analytics_engine.get_project_performance_data()

    if project_data.empty:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")
        return

    # ‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    budget_chart = analytics_engine.create_budget_analysis_chart(project_data)
    st.plotly_chart(budget_chart, use_container_width=True)

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")
        total_budget = project_data["Budget"].sum()
        total_spent = project_data["ActualCost"].sum()
        remaining_budget = total_budget - total_spent
        utilization_rate = (total_spent / total_budget * 100) if total_budget > 0 else 0

        st.metric("üíº ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"‡∏ø{total_budget:,.2f}")
        st.metric("üí∏ ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", f"‡∏ø{total_spent:,.2f}")
        st.metric("üí∞ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà", f"‡∏ø{remaining_budget:,.2f}")
        st.metric("üìà ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ", f"{utilization_rate:.1f}%")

    with col2:
        st.subheader("‚ö†Ô∏è ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")
        overbudget_projects = (
            project_data[project_data["is_overbudget"] == True]
            if "is_overbudget" in project_data.columns
            else pd.DataFrame()
        )

        if not overbudget_projects.empty:
            for _, project in overbudget_projects.iterrows():
                st.error(
                    f"üö® {project['ProjectName']}: ‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö {project['budget_variance']:.1f}%"
                )
        else:
            st.success("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")


def show_team_productivity_report(analytics_engine: AnalyticsEngine):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡∏°"""
    st.subheader("üöÄ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡∏°")

    # ‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡∏°
    team_chart = analytics_engine.create_team_productivity_chart()
    st.plotly_chart(team_chart, use_container_width=True)

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô
    try:
        query = """
        SELECT 
            u.Department,
            COUNT(DISTINCT u.UserID) as team_size,
            COUNT(t.TaskID) as total_tasks,
            SUM(CASE WHEN t.Status = 'Done' THEN 1 ELSE 0 END) as completed_tasks,
            AVG(t.Progress) as avg_progress
        FROM Users u
        LEFT JOIN Tasks t ON u.UserID = t.AssignedUserID
        WHERE u.IsActive = 1
        GROUP BY u.Department
        ORDER BY completed_tasks DESC
        """

        team_data = pd.DataFrame(analytics_engine.db.fetch_all(query))

        if not team_data.empty:
            team_data["completion_rate"] = (
                team_data["completed_tasks"] / team_data["total_tasks"] * 100
            ).fillna(0)

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏ú‡∏ô‡∏Å
            st.subheader("üìã ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å")

            display_data = team_data.copy()
            display_data["completion_rate"] = display_data["completion_rate"].apply(
                lambda x: f"{x:.1f}%"
            )
            display_data["avg_progress"] = display_data["avg_progress"].apply(
                lambda x: f"{x:.1f}%" if pd.notna(x) else "0.0%"
            )

            display_data.columns = [
                "‡πÅ‡∏ú‡∏ô‡∏Å",
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô",
                "‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                "‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à",
                "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
                "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            ]
            st.dataframe(display_data, use_container_width=True, hide_index=True)

    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°: {e}")


def show_timeline_analysis_report(analytics_engine: AnalyticsEngine):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå"""
    st.subheader("üìÖ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")

    # ‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå
    timeline_chart = analytics_engine.create_timeline_analysis()
    st.plotly_chart(timeline_chart, use_container_width=True)

    # ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
    advanced_analytics = AdvancedAnalytics(analytics_engine)

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üîÆ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        try:
            projects_query = (
                "SELECT ProjectID, ProjectName FROM Projects WHERE Status = 'Active'"
            )
            active_projects = analytics_engine.db.fetch_all(projects_query)

            if active_projects:
                project_options = {
                    p["ProjectName"]: p["ProjectID"] for p in active_projects
                }
                selected_project = st.selectbox(
                    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", options=list(project_options.keys())
                )

                if selected_project and st.button("üîç ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•"):
                    prediction = advanced_analytics.predict_project_completion(
                        project_options[selected_project]
                    )

                    if prediction:
                        st.success(
                            f"üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {prediction['completion_rate']:.1f}%"
                        )
                        if prediction["predicted_completion_date"]:
                            st.info(
                                f"üìÖ ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à: {prediction['predicted_completion_date']}"
                            )
                        st.write(f"‚ö†Ô∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {prediction['risk_level']}")
            else:
                st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô")

        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    with col2:
        st.subheader("üíπ ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô")

        roi_metrics = advanced_analytics.calculate_roi_metrics()

        if roi_metrics:
            st.metric("üìà ROI", f"{roi_metrics['roi_percentage']:.1f}%")
            st.metric("‚úÖ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"{roi_metrics['success_rate']:.1f}%")
            st.metric("‚ö° ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô", f"{roi_metrics['cost_efficiency']:.2f}")
            st.metric(
                "üíé ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", f"‡∏ø{roi_metrics['avg_project_value']:,.2f}"
            )


def show_executive_summary_report(analytics_engine: AnalyticsEngine):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£"""
    st.subheader("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£")

    summary = analytics_engine.generate_executive_summary()

    if not summary:
        st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ")
        return

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("üìÅ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", summary["total_projects"])

    with col2:
        st.metric("üöÄ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô", summary["active_projects"])

    with col3:
        st.metric("‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", summary["completed_projects"])

    with col4:
        st.metric("‚è∞ ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î", summary["overdue_tasks"])

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
    st.subheader("üí∞ ‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô")

    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("üíº ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏ß‡∏°", f"‡∏ø{summary['total_budget']:,.2f}")

    with col2:
        st.metric("üí∏ ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", f"‡∏ø{summary['total_spent']:,.2f}")

    with col3:
        st.metric("üìä ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏ö", f"{summary['budget_utilization']:.1f}%")

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")
        if summary["key_insights"]:
            for insight in summary["key_insights"]:
                st.info(f"üí° {insight}")
        else:
            st.success("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á")

    with col2:
        st.subheader("üìù ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
        if summary["recommendations"]:
            for recommendation in summary["recommendations"]:
                st.warning(f"üéØ {recommendation}")
        else:
            st.success("‚úÖ ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô")

    # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    st.divider()
    st.subheader("üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")

    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("üìä ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel", use_container_width=True):
            # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Excel
            project_data = analytics_engine.export_report_data(
                ReportType.PROJECT_OVERVIEW
            )
            if not project_data.empty:
                st.download_button(
                    label="üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Project Report.xlsx",
                    data=project_data.to_csv(index=False).encode("utf-8-sig"),
                    file_name=f"project_report_{datetime.now().strftime('%Y%m%d')}.csv",
                    mime="text/csv",
                )

    with col2:
        if st.button("üìã ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å PDF", use_container_width=True):
            st.info("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ")

    with col3:
        if st.button("üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•", use_container_width=True):
            st.info("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ")
