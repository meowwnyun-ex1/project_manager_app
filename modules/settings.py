#!/usr/bin/env python3
"""
modules/settings.py
System Settings Management for DENSO Project Manager Pro
"""
import streamlit as st
import pandas as pd
from datetime import datetime, date, time
from typing import Dict, List, Any, Optional
import logging
import json
import os

from utils.error_handler import safe_execute, handle_error, validate_input
from utils.ui_components import UIComponents

logger = logging.getLogger(__name__)


class SettingsManager:
    """System settings management functionality"""

    def __init__(self, db_manager):
        self.db = db_manager
        self.ui = UIComponents()

    def get_system_settings(self) -> Dict[str, Any]:
        """Get system settings"""
        try:
            # Create settings table if not exists
            self._ensure_settings_table()

            query = "SELECT SettingKey, SettingValue FROM SystemSettings"
            results = self.db.execute_query(query)

            settings = {}
            for row in results:
                try:
                    # Try to parse JSON values
                    settings[row["SettingKey"]] = json.loads(row["SettingValue"])
                except json.JSONDecodeError:
                    # If not JSON, store as string
                    settings[row["SettingKey"]] = row["SettingValue"]

            # Default settings if none exist
            if not settings:
                settings = self._get_default_settings()
                self._save_default_settings(settings)

            return settings

        except Exception as e:
            logger.error(f"Error getting system settings: {e}")
            return self._get_default_settings()

    def update_setting(self, key: str, value: Any) -> bool:
        """Update a system setting"""
        try:
            self._ensure_settings_table()

            # Convert value to JSON if needed
            if isinstance(value, (dict, list)):
                json_value = json.dumps(value)
            else:
                json_value = str(value)

            # Check if setting exists
            check_query = (
                "SELECT COUNT(*) as count FROM SystemSettings WHERE SettingKey = ?"
            )
            result = self.db.execute_query(check_query, (key,))

            if result and result[0]["count"] > 0:
                # Update existing setting
                query = "UPDATE SystemSettings SET SettingValue = ?, UpdatedDate = GETDATE() WHERE SettingKey = ?"
                self.db.execute_non_query(query, (json_value, key))
            else:
                # Insert new setting
                query = "INSERT INTO SystemSettings (SettingKey, SettingValue) VALUES (?, ?)"
                self.db.execute_non_query(query, (key, json_value))

            return True

        except Exception as e:
            logger.error(f"Error updating setting {key}: {e}")
            return False

    def backup_database(self) -> Dict[str, Any]:
        """Create database backup"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = f"data/backups/backup_{timestamp}.bak"

            # Ensure backup directory exists
            os.makedirs("data/backups", exist_ok=True)

            query = f"""
            BACKUP DATABASE [{st.secrets['database']['database']}] 
            TO DISK = '{os.path.abspath(backup_path)}'
            WITH FORMAT, COMPRESSION, CHECKSUM
            """

            self.db.execute_non_query(query)

            return {
                "success": True,
                "backup_path": backup_path,
                "timestamp": timestamp,
                "message": "‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            }

        except Exception as e:
            logger.error(f"Database backup failed: {e}")
            return {"success": False, "error": str(e), "message": "‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"}

    def cleanup_database(self) -> Dict[str, Any]:
        """Clean up old data"""
        try:
            cleanup_stats = {"deleted_records": 0, "actions": []}

            # Clean up old activity logs (older than 6 months)
            query = """
            DELETE FROM ActivityLogs 
            WHERE CreatedDate < DATEADD(month, -6, GETDATE())
            """

            try:
                rows_affected = self.db.execute_non_query(query)
                cleanup_stats["deleted_records"] += rows_affected
                cleanup_stats["actions"].append(
                    f"‡∏•‡∏ö Activity Logs ‡πÄ‡∏Å‡πà‡∏≤: {rows_affected} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
                )
            except:
                pass  # Table might not exist

            # Clean up temporary files
            temp_files_cleaned = 0
            if os.path.exists("temp"):
                for file in os.listdir("temp"):
                    try:
                        os.remove(os.path.join("temp", file))
                        temp_files_cleaned += 1
                    except:
                        pass

                cleanup_stats["actions"].append(
                    f"‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: {temp_files_cleaned} ‡πÑ‡∏ü‡∏•‡πå"
                )

            return {
                "success": True,
                "stats": cleanup_stats,
                "message": "‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            }

        except Exception as e:
            logger.error(f"Database cleanup failed: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
            }

    def get_backup_files(self) -> List[Dict[str, Any]]:
        """Get list of backup files"""
        try:
            backup_dir = "data/backups"
            if not os.path.exists(backup_dir):
                return []

            backups = []
            for file in os.listdir(backup_dir):
                if file.endswith(".bak"):
                    file_path = os.path.join(backup_dir, file)
                    stat = os.stat(file_path)

                    backups.append(
                        {
                            "filename": file,
                            "path": file_path,
                            "size": stat.st_size,
                            "created_date": datetime.fromtimestamp(stat.st_ctime),
                        }
                    )

            return sorted(backups, key=lambda x: x["created_date"], reverse=True)

        except Exception as e:
            logger.error(f"Error getting backup files: {e}")
            return []

    def _ensure_settings_table(self):
        """Ensure SystemSettings table exists"""
        try:
            query = """
            IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='SystemSettings' AND xtype='U')
            CREATE TABLE SystemSettings (
                SettingID INT IDENTITY(1,1) PRIMARY KEY,
                SettingKey NVARCHAR(100) UNIQUE NOT NULL,
                SettingValue NVARCHAR(MAX) NOT NULL,
                CreatedDate DATETIME DEFAULT GETDATE(),
                UpdatedDate DATETIME DEFAULT GETDATE()
            )
            """

            self.db.execute_non_query(query)

        except Exception as e:
            logger.error(f"Error creating settings table: {e}")

    def _get_default_settings(self) -> Dict[str, Any]:
        """Get default system settings"""
        return {
            "app_name": "DENSO Project Manager Pro",
            "app_version": "2.0.0",
            "theme": "light",
            "language": "th",
            "timezone": "Asia/Bangkok",
            "session_timeout": 3600,
            "max_upload_size": 50,
            "email_notifications": True,
            "auto_backup": False,
            "backup_schedule": "02:00",
            "backup_retention_days": 30,
            "password_policy": {
                "min_length": 8,
                "require_uppercase": True,
                "require_lowercase": True,
                "require_digits": True,
                "require_special": True,
                "history_count": 5,
            },
            "security_settings": {
                "max_login_attempts": 5,
                "lockout_duration": 900,
                "session_cookie_secure": False,
                "force_password_change": False,
            },
        }

    def _save_default_settings(self, settings: Dict[str, Any]):
        """Save default settings to database"""
        for key, value in settings.items():
            self.update_setting(key, value)


def show_settings_page(settings_manager: SettingsManager, user_data: Dict[str, Any]):
    """Show settings page"""
    ui = UIComponents()

    # Page header
    ui.render_page_header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö", "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö", "‚öôÔ∏è")

    # Check permissions
    if user_data["Role"] not in ["Admin", "Project Manager"]:
        st.error("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö")
        return

    # Main content tabs
    if user_data["Role"] == "Admin":
        tab1, tab2, tab3, tab4, tab5 = st.tabs(
            ["üîß ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "üîê ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", "üë§ ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", "üìß ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "üîÑ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"]
        )
    else:
        tab1, tab2, tab3 = st.tabs(["üë§ ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", "üìß ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß"])

    if user_data["Role"] == "Admin":
        with tab1:
            show_general_settings(settings_manager)

        with tab2:
            show_security_settings(settings_manager)

        with tab3:
            show_profile_settings(settings_manager, user_data)

        with tab4:
            show_notification_settings(settings_manager)

        with tab5:
            show_backup_settings(settings_manager)
    else:
        with tab1:
            show_profile_settings(settings_manager, user_data)

        with tab2:
            show_notification_settings(settings_manager)

        with tab3:
            show_user_preferences(settings_manager, user_data)


def show_general_settings(settings_manager: SettingsManager):
    """Show general system settings"""
    st.subheader("üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")

    # Get current settings
    settings = safe_execute(settings_manager.get_system_settings, default_return={})

    with st.form("general_settings_form"):
        col1, col2 = st.columns(2)

        with col1:
            app_name = st.text_input(
                "‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô",
                value=settings.get("app_name", "DENSO Project Manager Pro"),
            )

            theme = st.selectbox(
                "‡∏ò‡∏µ‡∏°",
                options=["light", "dark"],
                index=0 if settings.get("theme", "light") == "light" else 1,
            )

            language = st.selectbox(
                "‡∏†‡∏≤‡∏©‡∏≤",
                options=["th", "en"],
                index=0 if settings.get("language", "th") == "th" else 1,
            )

            session_timeout = st.number_input(
                "‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)",
                min_value=300,
                max_value=86400,
                value=settings.get("session_timeout", 3600),
                step=300,
            )

        with col2:
            timezone = st.selectbox(
                "‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤", options=["Asia/Bangkok", "UTC", "Asia/Tokyo"], index=0
            )

            max_upload_size = st.number_input(
                "‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (MB)",
                min_value=1,
                max_value=500,
                value=settings.get("max_upload_size", 50),
                step=5,
            )

            email_notifications = st.checkbox(
                "‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•", value=settings.get("email_notifications", True)
            )

        if st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", type="primary"):
            # Update settings
            updates = {
                "app_name": app_name,
                "theme": theme,
                "language": language,
                "timezone": timezone,
                "session_timeout": session_timeout,
                "max_upload_size": max_upload_size,
                "email_notifications": email_notifications,
            }

            success_count = 0
            for key, value in updates.items():
                if settings_manager.update_setting(key, value):
                    success_count += 1

            if success_count == len(updates):
                st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                st.rerun()
            else:
                st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")


def show_security_settings(settings_manager: SettingsManager):
    """Show security settings"""
    st.subheader("üîê ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")

    settings = safe_execute(settings_manager.get_system_settings, default_return={})
    password_policy = settings.get("password_policy", {})
    security_settings = settings.get("security_settings", {})

    # Password Policy Settings
    st.markdown("### üîí ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")

    with st.form("password_policy_form"):
        col1, col2 = st.columns(2)

        with col1:
            min_length = st.number_input(
                "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥",
                min_value=4,
                max_value=32,
                value=password_policy.get("min_length", 8),
            )

            require_uppercase = st.checkbox(
                "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà", value=password_policy.get("require_uppercase", True)
            )

            require_lowercase = st.checkbox(
                "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å", value=password_policy.get("require_lowercase", True)
            )

        with col2:
            require_digits = st.checkbox(
                "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç", value=password_policy.get("require_digits", True)
            )

            require_special = st.checkbox(
                "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©", value=password_policy.get("require_special", True)
            )

            history_count = st.number_input(
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥",
                min_value=0,
                max_value=10,
                value=password_policy.get("history_count", 5),
            )

        if st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"):
            new_policy = {
                "min_length": min_length,
                "require_uppercase": require_uppercase,
                "require_lowercase": require_lowercase,
                "require_digits": require_digits,
                "require_special": require_special,
                "history_count": history_count,
            }

            if settings_manager.update_setting("password_policy", new_policy):
                st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                st.rerun()
            else:
                st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")

    st.markdown("---")

    # Login Security Settings
    st.markdown("### üõ°Ô∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")

    with st.form("login_security_form"):
        col1, col2 = st.columns(2)

        with col1:
            max_login_attempts = st.number_input(
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏¥‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
                min_value=3,
                max_value=10,
                value=security_settings.get("max_login_attempts", 5),
            )

            lockout_duration = st.number_input(
                "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πá‡∏≠‡∏Ñ (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)",
                min_value=300,
                max_value=3600,
                value=security_settings.get("lockout_duration", 900),
                step=300,
            )

        with col2:
            session_cookie_secure = st.checkbox(
                "‡πÉ‡∏ä‡πâ Secure Cookies",
                value=security_settings.get("session_cookie_secure", False),
                help="‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ HTTPS",
            )

            force_password_change = st.checkbox(
                "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å",
                value=security_settings.get("force_password_change", False),
            )

        if st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"):
            new_security = {
                "max_login_attempts": max_login_attempts,
                "lockout_duration": lockout_duration,
                "session_cookie_secure": session_cookie_secure,
                "force_password_change": force_password_change,
            }

            if settings_manager.update_setting("security_settings", new_security):
                st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                st.rerun()
            else:
                st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")


def show_profile_settings(settings_manager: SettingsManager, user_data: Dict[str, Any]):
    """Show user profile settings"""
    st.subheader("üë§ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå")

    # User information
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")
        st.markdown(f"**‡∏ä‡∏∑‡πà‡∏≠:** {user_data['FirstName']} {user_data['LastName']}")
        st.markdown(f"**‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:** {user_data['Username']}")
        st.markdown(f"**‡∏≠‡∏µ‡πÄ‡∏°‡∏•:** {user_data['Email']}")
        st.markdown(f"**‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó:** {user_data['Role']}")
        st.markdown(f"**‡πÅ‡∏ú‡∏ô‡∏Å:** {user_data.get('Department', 'N/A')}")

    with col2:
        st.markdown("### ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        if user_data.get("LastLoginDate"):
            last_login = user_data["LastLoginDate"].strftime("%d/%m/%Y %H:%M")
            st.markdown(f"**‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:** {last_login}")
        else:
            st.markdown("**‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:** ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å")

        if user_data.get("CreatedDate"):
            created_date = user_data["CreatedDate"].strftime("%d/%m/%Y")
            account_age = (datetime.now() - user_data["CreatedDate"]).days
            st.markdown(f"**‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:** {created_date}")
            st.markdown(f"**‡∏≠‡∏≤‡∏¢‡∏∏‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:** {account_age} ‡∏ß‡∏±‡∏ô")

    st.markdown("---")

    # Change password
    st.markdown("### üîê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")

    with st.form("change_password_form"):
        current_password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", type="password")
        new_password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password")
        confirm_password = st.text_input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password")

        if st.form_submit_button("üîë ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"):
            if not all([current_password, new_password, confirm_password]):
                st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
            elif new_password != confirm_password:
                st.error("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
            elif len(new_password) < 8:
                st.error("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
            else:
                # Change password logic would go here
                try:
                    from modules.auth import AuthenticationManager

                    auth_manager = AuthenticationManager(settings_manager.db)

                    result = auth_manager.change_password(
                        user_data["UserID"], current_password, new_password
                    )

                    if result["success"]:
                        st.success("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    else:
                        st.error(f"‚ùå {result['message']}")

                except Exception as e:
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")


def show_notification_settings(settings_manager: SettingsManager):
    """Show notification settings"""
    st.subheader("üìß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")

    settings = safe_execute(settings_manager.get_system_settings, default_return={})

    # Email notification settings
    with st.form("notification_settings_form"):
        st.markdown("### üì¨ ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•")

        col1, col2 = st.columns(2)

        with col1:
            email_notifications = st.checkbox(
                "‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•", value=settings.get("email_notifications", True)
            )

            task_assignment_notify = st.checkbox("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", value=True)

            task_due_notify = st.checkbox("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î", value=True)

            project_update_notify = st.checkbox("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", value=True)

        with col2:
            daily_summary = st.checkbox("‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô", value=False)

            weekly_report = st.checkbox("‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", value=False)

            system_maintenance = st.checkbox("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏∞‡∏ö‡∏ö", value=True)

        st.markdown("### ‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")

        col1, col2 = st.columns(2)

        with col1:
            daily_summary_time = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô", value=time(8, 0))

        with col2:
            due_reminder_hours = st.number_input(
                "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)", min_value=1, max_value=168, value=24
            )

        if st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"):
            notification_settings = {
                "email_notifications": email_notifications,
                "task_assignment_notify": task_assignment_notify,
                "task_due_notify": task_due_notify,
                "project_update_notify": project_update_notify,
                "daily_summary": daily_summary,
                "weekly_report": weekly_report,
                "system_maintenance": system_maintenance,
                "daily_summary_time": daily_summary_time.strftime("%H:%M"),
                "due_reminder_hours": due_reminder_hours,
            }

            if settings_manager.update_setting(
                "notification_settings", notification_settings
            ):
                st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                st.rerun()
            else:
                st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")


def show_backup_settings(settings_manager: SettingsManager):
    """Show backup and maintenance settings"""
    st.subheader("üîÑ ‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤")

    settings = safe_execute(settings_manager.get_system_settings, default_return={})

    # Backup settings
    st.markdown("### üíæ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

    with st.form("backup_settings_form"):
        col1, col2 = st.columns(2)

        with col1:
            auto_backup = st.checkbox(
                "‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", value=settings.get("auto_backup", False)
            )

            backup_schedule = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", value=time(2, 0))

        with col2:
            backup_retention_days = st.number_input(
                "‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ß‡∏±‡∏ô)",
                min_value=7,
                max_value=365,
                value=settings.get("backup_retention_days", 30),
            )

            compression_level = st.selectbox(
                "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î", options=["None", "Normal", "High"], index=1
            )

        if st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
            backup_settings = {
                "auto_backup": auto_backup,
                "backup_schedule": backup_schedule.strftime("%H:%M"),
                "backup_retention_days": backup_retention_days,
                "compression_level": compression_level,
            }

            for key, value in backup_settings.items():
                settings_manager.update_setting(key, value)

            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            st.rerun()

    st.markdown("---")

    # Manual backup and maintenance
    st.markdown("### üõ†Ô∏è ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á")

    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("üíæ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ", type="primary"):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
                result = settings_manager.backup_database()

                if result["success"]:
                    st.success(f"‚úÖ {result['message']}")
                    st.info(f"‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á: {result['backup_path']}")
                else:
                    st.error(f"‚ùå {result['message']}")

    with col2:
        if st.button("üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
                result = settings_manager.cleanup_database()

                if result["success"]:
                    st.success(f"‚úÖ {result['message']}")
                    for action in result["stats"]["actions"]:
                        st.info(f"‚Ä¢ {action}")
                else:
                    st.error(f"‚ùå {result['message']}")

    with col3:
        if st.button("üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"):
            st.info("‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤")

    # Backup files list
    st.markdown("### üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

    backup_files = safe_execute(settings_manager.get_backup_files, default_return=[])

    if backup_files:
        for backup in backup_files[:10]:  # Show last 10 backups
            col1, col2, col3, col4 = st.columns([3, 2, 2, 1])

            with col1:
                st.markdown(f"**{backup['filename']}**")

            with col2:
                st.markdown(f"{backup['size'] / 1024 / 1024:.1f} MB")

            with col3:
                st.markdown(backup["created_date"].strftime("%d/%m/%Y %H:%M"))

            with col4:
                if st.button("üì•", key=f"download_{backup['filename']}"):
                    st.info("‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤")
    else:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")


def show_user_preferences(settings_manager: SettingsManager, user_data: Dict[str, Any]):
    """Show user-specific preferences"""
    st.subheader("üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")

    # User preferences
    with st.form("user_preferences_form"):
        col1, col2 = st.columns(2)

        with col1:
            st.markdown("### üé® ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•")

            dashboard_layout = st.selectbox(
                "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î", options=["‡πÅ‡∏ö‡∏ö‡∏Å‡∏∞‡∏ó‡∏±‡∏î‡∏£‡∏±‡∏î", "‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", "‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏≤‡∏ü"]
            )

            items_per_page = st.selectbox(
                "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤", options=[10, 25, 50, 100], index=1
            )

            show_completed_tasks = st.checkbox("‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", value=False)

        with col2:
            st.markdown("### üìä ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")

            desktop_notifications = st.checkbox("‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏ô‡πÄ‡∏î‡∏™‡∏Å‡πå‡∏ó‡πá‡∏≠‡∏õ", value=True)

            sound_notifications = st.checkbox("‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", value=False)

            auto_refresh = st.checkbox("‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", value=True)

        if st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß"):
            preferences = {
                "dashboard_layout": dashboard_layout,
                "items_per_page": items_per_page,
                "show_completed_tasks": show_completed_tasks,
                "desktop_notifications": desktop_notifications,
                "sound_notifications": sound_notifications,
                "auto_refresh": auto_refresh,
            }

            # Save user preferences (would typically save to user-specific settings)
            user_pref_key = f"user_preferences_{user_data['UserID']}"
            if settings_manager.update_setting(user_pref_key, preferences):
                st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                st.rerun()
            else:
                st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
