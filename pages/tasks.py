# pages/tasks.py
import streamlit as st
from services.enhanced_project_service import ProjectService
from services.task_service import TaskService
from services.user_service import UserService
from components.forms import create_task_form
from components.tables import TableComponents


def app():
    st.title("‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô")

    # Quick action check
    if st.session_state.get("quick_action") == "add_task":
        st.info("üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
        del st.session_state["quick_action"]

    # Get required data
    projects_df = ProjectService.get_all_projects()
    users_data = UserService.get_all_users()

    if projects_df.empty:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
        if st.button("‚ûï ‡πÑ‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå"):
            st.session_state["page_selection"] = "‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå"
            st.rerun()
        return

    if not users_data:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
        return

    # Project selection for task management
    st.subheader("üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå")
    project_options = {
        row["ProjectName"]: row["ProjectID"] for _, row in projects_df.iterrows()
    }

    selected_project_name = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô",
        list(project_options.keys()),
        key="task_project_selector",
    )

    selected_project_id = project_options[selected_project_name]

    # Add new task section
    st.subheader(f"‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {selected_project_name}")

    task_form = create_task_form("add_task_form")
    form_data = task_form.render(
        project_id=selected_project_id, users=users_data, submit_label="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô"
    )

    if form_data:
        if TaskService.create_task(form_data):
            st.success(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô '{form_data['task_name']}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            st.rerun()
        else:
            st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô")

    st.markdown("---")

    # Display tasks for selected project
    st.subheader(f"üìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå: {selected_project_name}")

    tasks_df = TaskService.get_tasks_by_project(selected_project_id)

    if not tasks_df.empty:
        # Task filters
        col1, col2, col3 = st.columns(3)

        with col1:
            status_filter = st.multiselect(
                "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
                options=tasks_df["Status"].unique(),
                default=tasks_df["Status"].unique(),
                key="task_status_filter",
            )

        with col2:
            assignee_filter = st.multiselect(
                "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö",
                options=tasks_df["Assignee"].dropna().unique(),
                default=tasks_df["Assignee"].dropna().unique(),
                key="task_assignee_filter",
            )

        with col3:
            sort_by = st.selectbox(
                "‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°",
                ["EndDate", "StartDate", "Progress", "TaskName"],
                format_func=lambda x: {
                    "EndDate": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à",
                    "StartDate": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°",
                    "Progress": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤",
                    "TaskName": "‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô",
                }[x],
                key="task_sort_selector",
            )

        # Apply filters
        filtered_tasks = tasks_df[
            (tasks_df["Status"].isin(status_filter))
            & (tasks_df["Assignee"].isin(assignee_filter))
        ].copy()

        if sort_by in filtered_tasks.columns:
            filtered_tasks = filtered_tasks.sort_values(sort_by)

        # Display filtered tasks
        if not filtered_tasks.empty:
            TableComponents.render_task_table(filtered_tasks)

            # Task management section
            st.markdown("---")
            st.subheader("‚úèÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô")

            # Task selection for edit/delete
            task_options = {
                f"{row['TaskName']} (ID: {row['TaskID']})": row["TaskID"]
                for _, row in filtered_tasks.iterrows()
            }

            selected_task = st.selectbox(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö",
                ["-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô --"] + list(task_options.keys()),
                key="task_management_selector",
            )

            if selected_task and selected_task != "-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô --":
                task_id = task_options[selected_task]
                task_data = (
                    filtered_tasks[filtered_tasks["TaskID"] == task_id]
                    .iloc[0]
                    .to_dict()
                )

                col1, col2 = st.columns([2, 1])

                with col1:
                    st.markdown("#### ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô")
                    edit_form = create_task_form("edit_task_form")
                    updated_data = edit_form.render(
                        project_id=selected_project_id,
                        users=users_data,
                        initial_data=task_data,
                        submit_label="üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏á‡∏≤‡∏ô",
                    )

                    if updated_data:
                        if TaskService.update_task(task_id, updated_data):
                            st.success(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏á‡∏≤‡∏ô '{updated_data['task_name']}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                            st.rerun()
                        else:
                            st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏á‡∏≤‡∏ô")

                with col2:
                    st.markdown("#### üóëÔ∏è ‡∏•‡∏ö‡∏á‡∏≤‡∏ô")
                    st.warning("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ")

                    confirm_delete = st.checkbox(
                        f"‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏á‡∏≤‡∏ô '{task_data['TaskName']}'",
                        key=f"confirm_delete_task_{task_id}",
                    )

                    if confirm_delete:
                        if st.button(
                            "üóëÔ∏è ‡∏•‡∏ö‡∏á‡∏≤‡∏ô",
                            type="secondary",
                            key=f"delete_task_btn_{task_id}",
                        ):
                            if TaskService.delete_task(task_id):
                                st.success("‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                                st.rerun()
                            else:
                                st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏á‡∏≤‡∏ô")

                    # Task details
                    st.markdown("#### üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô")
                    st.write(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** {task_data['Status']}")
                    st.write(f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤:** {task_data['Progress']}%")
                    st.write(f"**‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö:** {task_data['Assignee']}")

                    # Progress update shortcut
                    if task_data["Status"] != "Done":
                        st.markdown("#### ‚ö° ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏î‡πà‡∏ß‡∏ô")
                        new_progress = st.slider(
                            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤",
                            0,
                            100,
                            int(task_data["Progress"]),
                            key=f"quick_progress_{task_id}",
                        )

                        if st.button(
                            "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤", key=f"save_progress_{task_id}"
                        ):
                            quick_update_data = task_data.copy()
                            quick_update_data.update(
                                {
                                    "project_id": selected_project_id,
                                    "task_name": task_data["TaskName"],
                                    "description": task_data["Description"],
                                    "start_date": task_data["StartDate"],
                                    "end_date": task_data["EndDate"],
                                    "assignee_id": task_data["AssigneeID"],
                                    "status": (
                                        "Done"
                                        if new_progress == 100
                                        else task_data["Status"]
                                    ),
                                    "progress": new_progress,
                                }
                            )

                            if TaskService.update_task(task_id, quick_update_data):
                                st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                                st.rerun()
        else:
            st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

    else:
        st.info(f"‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå '{selected_project_name}' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô")

        # Show sample tasks for guidance
        st.markdown("### üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô")
        sample_tasks = [
            "üìã ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
            "üé® ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö UI/UX",
            "üíª ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Backend",
            "üåê ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Frontend",
            "üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö",
            "üìö ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Documentation",
            "üöÄ Deploy ‡∏£‡∏∞‡∏ö‡∏ö",
        ]

        for task in sample_tasks:
            st.markdown(f"- {task}")

    # Quick statistics
    if not tasks_df.empty:
        st.markdown("---")
        st.subheader("üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå")

        col1, col2, col3, col4 = st.columns(4)

        with col1:
            total_tasks = len(tasks_df)
            st.metric("‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total_tasks)

        with col2:
            completed_tasks = len(tasks_df[tasks_df["Status"] == "Done"])
            st.metric("‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", completed_tasks)

        with col3:
            if total_tasks > 0:
                completion_rate = (completed_tasks / total_tasks) * 100
                st.metric("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"{completion_rate:.1f}%")
            else:
                st.metric("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "0%")

        with col4:
            avg_progress = tasks_df["Progress"].mean()
            st.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_progress:.1f}%")
