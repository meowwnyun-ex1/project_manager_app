# pages/profile.py
import streamlit as st
import pandas as pd
from typing import Dict, Any
from services.task_service import TaskService
from services.enhanced_project_service import ProjectService
from utils.helpers import get_current_user_info, show_error
from utils.formatters import format_date
from components.charts import ChartComponents


def app():
    """User profile and personal dashboard page"""
    st.title("üë§ ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

    # Get current user info
    user_info = get_current_user_info()
    if not user_info:
        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
        return

    # Create tabs for different sections
    profile_tabs = st.tabs(
        ["üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", "‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", "üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "üìÖ ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"]
    )

    with profile_tabs[0]:
        render_personal_overview(user_info)

    with profile_tabs[1]:
        render_account_settings(user_info)

    with profile_tabs[2]:
        render_work_statistics(user_info)

    with profile_tabs[3]:
        render_my_tasks(user_info)


def render_personal_overview(user_info: Dict[str, Any]):
    """Render personal overview dashboard"""
    st.subheader(f"üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {user_info['username']}!")

    # User basic info card
    col1, col2, col3 = st.columns([1, 2, 1])

    with col2:
        st.markdown(
            """
        <div style="
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 2rem;
            border-radius: 15px;
            color: white;
            text-align: center;
            margin: 1rem 0;
        ">
            <h2 style="margin: 0; color: white;">üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h2>
            <p style="margin: 0.5rem 0; font-size: 1.2rem;">"""
            + f"{user_info['username']}"
            + """</p>
            <p style="margin: 0; opacity: 0.9;">‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: """
            + f"{user_info['role']}"
            + """</p>
        </div>
        """,
            unsafe_allow_html=True,
        )

    # Quick stats
    user_id = user_info["user_id"]

    # Get user's tasks and projects
    all_tasks = TaskService.get_all_tasks()
    user_tasks = (
        all_tasks[all_tasks["AssigneeID"] == user_id]
        if not all_tasks.empty
        else pd.DataFrame()
    )

    all_projects = ProjectService.get_all_projects()

    # Calculate metrics
    total_tasks = len(user_tasks)
    completed_tasks = (
        len(user_tasks[user_tasks["Status"] == "Done"]) if not user_tasks.empty else 0
    )
    in_progress_tasks = (
        len(user_tasks[user_tasks["Status"] == "In Progress"])
        if not user_tasks.empty
        else 0
    )

    # Projects involved in
    if not user_tasks.empty:
        involved_projects = user_tasks["ProjectID"].nunique()
    else:
        involved_projects = 0

    # Display metrics
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total_tasks)

    with col2:
        completion_rate = (
            (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0
        )
        st.metric("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"{completion_rate:.1f}%")

    with col3:
        st.metric("‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", in_progress_tasks)

    with col4:
        st.metric("‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á", involved_projects)

    # Recent activity
    st.subheader("üìà ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")

    if not user_tasks.empty:
        # Recent tasks (last 5)
        recent_tasks = user_tasks.nlargest(5, "TaskID")[
            ["TaskName", "Status", "Progress", "EndDate"]
        ]
        recent_tasks["EndDate"] = recent_tasks["EndDate"].apply(format_date)
        recent_tasks["Progress"] = recent_tasks["Progress"].apply(lambda x: f"{x}%")
        recent_tasks.columns = ["‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤", "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à"]

        st.dataframe(recent_tasks, use_container_width=True, hide_index=True)
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢")


def render_account_settings(user_info: Dict[str, Any]):
    """Render account settings page"""
    st.subheader("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

    # Account information section
    st.markdown("### üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ")

    col1, col2 = st.columns(2)

    with col1:
        st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", value=user_info["username"], disabled=True)
        st.text_input("‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó", value=user_info["role"], disabled=True)

    with col2:
        user_id = user_info["user_id"]
        st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", value=str(user_id), disabled=True)
        st.text_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", value="‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", disabled=True)

    # Password change section
    st.markdown("### üîê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")

    with st.form("change_password_form"):
        current_password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", type="password")
        new_password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password")
        confirm_password = st.text_input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password")

        if st.form_submit_button("üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="primary"):
            # Validation
            if not all([current_password, new_password, confirm_password]):
                show_error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
            elif new_password != confirm_password:
                show_error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
            elif len(new_password) < 6:
                show_error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
            else:
                # TODO: Implement password change functionality
                st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤")

    # Preferences section
    st.markdown("### üé® ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")

    col1, col2 = st.columns(2)

    with col1:
        st.selectbox("‡∏†‡∏≤‡∏©‡∏≤", ["‡πÑ‡∏ó‡∏¢", "English"], disabled=True)
        st.selectbox("‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤", ["Asia/Bangkok"], disabled=True)

    with col2:
        st.selectbox(
            "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", ["DD/MM/YYYY", "MM/DD/YYYY", "YYYY-MM-DD"], disabled=True
        )
        st.checkbox("‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•", disabled=True)

    st.info("üí° ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏°‡∏µ‡∏ú‡∏•‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")


def render_work_statistics(user_info: Dict[str, Any]):
    """Render personal work statistics"""
    st.subheader("üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")

    user_id = user_info["user_id"]

    # Get user's task data
    all_tasks = TaskService.get_all_tasks()
    user_tasks = (
        all_tasks[all_tasks["AssigneeID"] == user_id]
        if not all_tasks.empty
        else pd.DataFrame()
    )

    if user_tasks.empty:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        return

    # Task status distribution
    st.subheader("üìä ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô")

    status_counts = user_tasks["Status"].value_counts()
    status_data = [
        {"Status": status, "Count": count} for status, count in status_counts.items()
    ]

    # Create pie chart
    charts = ChartComponents()
    fig = charts.create_status_pie_chart(status_data, title="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô")
    st.plotly_chart(fig, use_container_width=True)

    # Progress analysis
    st.subheader("üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤")

    col1, col2, col3 = st.columns(3)

    with col1:
        avg_progress = user_tasks["Progress"].mean()
        st.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_progress:.1f}%")

    with col2:
        completed_tasks = len(user_tasks[user_tasks["Status"] == "Done"])
        total_tasks = len(user_tasks)
        completion_rate = (
            (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0
        )
        st.metric("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à", f"{completion_rate:.1f}%")

    with col3:
        overdue_tasks = len(
            user_tasks[
                (user_tasks["EndDate"] < pd.Timestamp.now())
                & (user_tasks["Status"] != "Done")
            ]
        )
        st.metric("‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î", overdue_tasks)

    # Monthly progress trend
    st.subheader("üìÖ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")

    # Create monthly progress data
    user_tasks["Month"] = pd.to_datetime(user_tasks["StartDate"]).dt.to_period("M")
    monthly_stats = (
        user_tasks.groupby("Month")
        .agg({"Progress": "mean", "TaskID": "count"})
        .reset_index()
    )

    if not monthly_stats.empty:
        monthly_stats["Month"] = monthly_stats["Month"].astype(str)

        # Create trend chart
        trend_data = monthly_stats.to_dict("records")
        charts = ChartComponents()
        fig = charts.create_trend_line_chart(
            trend_data, title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", x_col="Month", y_col="Progress"
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")

    # Performance insights
    st.subheader("üí° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")

    insights = []

    # Task completion insights
    if completion_rate >= 80:
        insights.append("üéâ ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å")
    elif completion_rate >= 60:
        insights.append("üëç ‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢")
    else:
        insights.append("üí™ ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")

    # Progress insights
    if avg_progress >= 80:
        insights.append("üöÄ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠")
    elif avg_progress >= 50:
        insights.append("üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢")
    else:
        insights.append("‚ö° ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢")

    # Overdue insights
    if overdue_tasks == 0:
        insights.append("‚è∞ ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å! ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
    elif overdue_tasks <= 2:
        insights.append("‚ö†Ô∏è ‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç")
    else:
        insights.append("üî• ‡∏£‡∏∞‡∏ß‡∏±‡∏á! ‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô")

    for insight in insights:
        st.markdown(f"- {insight}")


def render_my_tasks(user_info: Dict[str, Any]):
    """Render user's personal task management"""
    st.subheader("üìÖ ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô")

    user_id = user_info["user_id"]

    # Get user's tasks
    all_tasks = TaskService.get_all_tasks()
    user_tasks = (
        all_tasks[all_tasks["AssigneeID"] == user_id]
        if not all_tasks.empty
        else pd.DataFrame()
    )

    if user_tasks.empty:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢")
        return

    # Task filter options
    col1, col2, col3 = st.columns(3)

    with col1:
        status_filter = st.multiselect(
            "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
            options=user_tasks["Status"].unique(),
            default=user_tasks["Status"].unique(),
        )

    with col2:
        project_filter = st.multiselect(
            "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå",
            options=(
                user_tasks["ProjectName"].unique()
                if "ProjectName" in user_tasks.columns
                else []
            ),
            default=(
                user_tasks["ProjectName"].unique()
                if "ProjectName" in user_tasks.columns
                else []
            ),
        )

    with col3:
        sort_by = st.selectbox(
            "‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°",
            options=["EndDate", "StartDate", "Progress", "TaskName"],
            format_func=lambda x: {
                "EndDate": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à",
                "StartDate": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°",
                "Progress": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤",
                "TaskName": "‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô",
            }[x],
        )

    # Apply filters
    filtered_tasks = user_tasks[
        (user_tasks["Status"].isin(status_filter))
        & (
            user_tasks["ProjectName"].isin(project_filter)
            if "ProjectName" in user_tasks.columns
            else True
        )
    ].copy()

    # Sort tasks
    if sort_by in filtered_tasks.columns:
        filtered_tasks = filtered_tasks.sort_values(sort_by)

    # Display tasks
    if filtered_tasks.empty:
        st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        return

    # Task priority sections
    now = pd.Timestamp.now()

    # Overdue tasks
    overdue_tasks = filtered_tasks[
        (filtered_tasks["EndDate"] < now) & (filtered_tasks["Status"] != "Done")
    ]

    # Due soon (within 3 days)
    due_soon = filtered_tasks[
        (filtered_tasks["EndDate"] >= now)
        & (filtered_tasks["EndDate"] <= now + pd.Timedelta(days=3))
        & (filtered_tasks["Status"] != "Done")
    ]

    # Other tasks
    other_tasks = filtered_tasks[
        ~filtered_tasks.index.isin(overdue_tasks.index)
        & ~filtered_tasks.index.isin(due_soon.index)
    ]

    # Display task sections
    if not overdue_tasks.empty:
        st.markdown("### üî¥ ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
        render_task_cards(overdue_tasks, "overdue")

    if not due_soon.empty:
        st.markdown("### üü° ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
        render_task_cards(due_soon, "due_soon")

    if not other_tasks.empty:
        st.markdown("### üü¢ ‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ")
        render_task_cards(other_tasks, "normal")


def render_task_cards(tasks_df: pd.DataFrame, priority_type: str):
    """Render task cards with different styling based on priority"""
    for _, task in tasks_df.iterrows():
        # Determine card color based on priority
        if priority_type == "overdue":
            border_color = "#dc3545"  # Red
        elif priority_type == "due_soon":
            border_color = "#ffc107"  # Yellow
        else:
            border_color = "#28a745"  # Green

        # Calculate days until due
        days_until_due = (task["EndDate"] - pd.Timestamp.now()).days

        # Create task card
        with st.container():
            st.markdown(
                f"""
            <div style="
                border-left: 4px solid {border_color};
                padding: 1rem;
                margin: 0.5rem 0;
                background-color: #f8f9fa;
                border-radius: 0 8px 8px 0;
            ">
                <h4 style="margin: 0 0 0.5rem 0; color: #333;">{task['TaskName']}</h4>
                <p style="margin: 0 0 0.5rem 0; color: #666;">‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå: {task.get('ProjectName', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}</p>
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <span style="color: #666;">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: <strong>{task['Status']}</strong></span>
                    <span style="color: #666;">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: <strong>{task['Progress']}%</strong></span>
                    <span style="color: #666;">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à: <strong>{format_date(task['EndDate'])}</strong></span>
                </div>
            </div>
            """,
                unsafe_allow_html=True,
            )

            # Quick action buttons
            col1, col2, col3, col4 = st.columns(4)

            with col1:
                if st.button(f"üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", key=f"edit_{task['TaskID']}"):
                    st.session_state["selected_task_id"] = task["TaskID"]
                    st.session_state["page_selection"] = "‡∏á‡∏≤‡∏ô"
                    st.rerun()

            with col2:
                if task["Status"] != "Done":
                    if st.button(f"‚úÖ ‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à", key=f"complete_{task['TaskID']}"):
                        # TODO: Implement quick task completion
                        st.success(f"‡∏á‡∏≤‡∏ô '{task['TaskName']}' ‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")

            with col3:
                if task["Progress"] < 100:
                    new_progress = st.slider(
                        "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤",
                        0,
                        100,
                        int(task["Progress"]),
                        key=f"progress_{task['TaskID']}",
                        label_visibility="collapsed",
                    )
                    if new_progress != task["Progress"]:
                        # TODO: Implement progress update
                        st.info(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô {new_progress}%")

            with col4:
                if days_until_due < 0:
                    st.markdown("üî¥ **‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î**")
                elif days_until_due <= 1:
                    st.markdown("üü° **‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ**")
                else:
                    st.markdown(f"‚è∞ ‡∏≠‡∏µ‡∏Å {days_until_due} ‡∏ß‡∏±‡∏ô")
