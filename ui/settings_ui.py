#!/usr/bin/env python3
"""
settings_ui.py
SDX Project Manager - Enterprise Settings Management Interface
Comprehensive system configuration and administration panel
"""

import streamlit as st
import logging
import json
import yaml
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict
from enum import Enum
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Import project modules
from settings import SettingsManager, SystemSettings, SecuritySettings, EmailSettings
from auth import AuthenticationManager, UserRole, Permission
from users import UserManager
from ui_components import UIComponents, ThemeManager
from error_handler import ErrorHandler, handle_errors

logger = logging.getLogger(__name__)


class SettingsCategory(Enum):
    """Settings categories"""

    GENERAL = "general"
    SECURITY = "security"
    DATABASE = "database"
    EMAIL = "email"
    THEME = "theme"
    USERS = "users"
    SYSTEM = "system"
    BACKUP = "backup"
    INTEGRATIONS = "integrations"
    AUDIT = "audit"


class SettingsLevel(Enum):
    """Settings access levels"""

    ADMIN_ONLY = "admin_only"
    MANAGER = "manager"
    USER = "user"
    PUBLIC = "public"


@dataclass
class SettingItem:
    """Individual setting item"""

    key: str
    name: str
    description: str
    value: Any
    default_value: Any
    setting_type: str  # text, number, boolean, select, json
    category: SettingsCategory
    level: SettingsLevel
    options: Optional[List[Any]] = None
    validation: Optional[str] = None
    restart_required: bool = False


class SettingsUI:
    """Enterprise Settings Management Interface"""

    def __init__(self, db_manager, theme_manager: ThemeManager):
        self.db = db_manager
        self.settings_manager = SettingsManager(db_manager)
        self.auth_manager = AuthenticationManager(db_manager)
        self.user_manager = UserManager(db_manager)
        self.theme = theme_manager
        self.ui_components = UIComponents(theme_manager)
        self.error_handler = ErrorHandler()

    @handle_errors
    def render_settings_page(self):
        """Main settings page renderer"""
        st.markdown("# ‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö")

        # Check admin permissions
        if not self._check_admin_permission():
            st.error("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö")
            return

        # Settings header
        self._render_settings_header()

        # Settings navigation
        selected_category = self._render_settings_navigation()

        # Settings content
        self._render_settings_content(selected_category)

        # Settings footer
        self._render_settings_footer()

    def _check_admin_permission(self) -> bool:
        """Check if user has admin permissions"""
        user_data = st.session_state.get("user_data", {})
        return user_data.get("Role") in ["Admin", "System Admin"]

    def _render_settings_header(self):
        """Render settings page header"""
        col1, col2, col3 = st.columns([2, 1, 1])

        with col1:
            st.markdown("### üîß ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤")

        with col2:
            if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", type="primary"):
                self._save_all_settings()

        with col3:
            if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"):
                self._reset_to_defaults()

    def _render_settings_navigation(self) -> SettingsCategory:
        """Render settings navigation sidebar"""
        with st.sidebar:
            st.markdown("### üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")

            # Settings categories
            categories = [
                ("üîß ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", SettingsCategory.GENERAL),
                ("üîí ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", SettingsCategory.SECURITY),
                ("üóÑÔ∏è ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", SettingsCategory.DATABASE),
                ("üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•", SettingsCategory.EMAIL),
                ("üé® ‡∏ò‡∏µ‡∏°", SettingsCategory.THEME),
                ("üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", SettingsCategory.USERS),
                ("üíª ‡∏£‡∏∞‡∏ö‡∏ö", SettingsCategory.SYSTEM),
                ("üíæ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", SettingsCategory.BACKUP),
                ("üîå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", SettingsCategory.INTEGRATIONS),
                ("üìã ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", SettingsCategory.AUDIT),
            ]

            selected = st.radio(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
                options=[cat[1] for cat in categories],
                format_func=lambda x: next(cat[0] for cat in categories if cat[1] == x),
                key="settings_category",
            )

            # System status
            st.markdown("---")
            st.markdown("### üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö")
            self._render_system_status()

            return selected

    def _render_system_status(self):
        """Render system status in sidebar"""
        # System uptime
        uptime = self._get_system_uptime()
        st.metric("Uptime", uptime)

        # Memory usage
        memory_usage = self._get_memory_usage()
        st.metric("Memory Usage", f"{memory_usage}%")

        # Database connections
        db_connections = self._get_db_connections()
        st.metric("DB Connections", db_connections)

        # Last backup
        last_backup = self._get_last_backup_time()
        st.metric("Last Backup", last_backup)

    def _render_settings_content(self, category: SettingsCategory):
        """Render settings content based on category"""
        if category == SettingsCategory.GENERAL:
            self._render_general_settings()
        elif category == SettingsCategory.SECURITY:
            self._render_security_settings()
        elif category == SettingsCategory.DATABASE:
            self._render_database_settings()
        elif category == SettingsCategory.EMAIL:
            self._render_email_settings()
        elif category == SettingsCategory.THEME:
            self._render_theme_settings()
        elif category == SettingsCategory.USERS:
            self._render_user_settings()
        elif category == SettingsCategory.SYSTEM:
            self._render_system_settings()
        elif category == SettingsCategory.BACKUP:
            self._render_backup_settings()
        elif category == SettingsCategory.INTEGRATIONS:
            self._render_integration_settings()
        elif category == SettingsCategory.AUDIT:
            self._render_audit_settings()

    def _render_general_settings(self):
        """Render general system settings"""
        st.markdown("## üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("### üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£")

            company_name = st.text_input(
                "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£",
                value=self._get_setting("company_name", "DENSO Innovation Team"),
                key="company_name",
            )

            company_logo = st.file_uploader(
                "‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£", type=["png", "jpg", "jpeg"], key="company_logo"
            )

            timezone = st.selectbox(
                "‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤",
                options=["Asia/Bangkok", "UTC", "Asia/Tokyo", "America/New_York"],
                index=0,
                key="timezone",
            )

            language = st.selectbox(
                "‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
                options=["Thai", "English", "Japanese"],
                index=0,
                key="default_language",
            )

        with col2:
            st.markdown("### ‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö")

            max_file_size = st.number_input(
                "‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (MB)",
                min_value=1,
                max_value=1000,
                value=self._get_setting("max_file_size", 100),
                key="max_file_size",
            )

            session_timeout = st.number_input(
                "‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô (‡∏ô‡∏≤‡∏ó‡∏µ)",
                min_value=15,
                max_value=1440,
                value=self._get_setting("session_timeout", 480),
                key="session_timeout",
            )

            enable_notifications = st.checkbox(
                "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
                value=self._get_setting("enable_notifications", True),
                key="enable_notifications",
            )

            maintenance_mode = st.checkbox(
                "‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö",
                value=self._get_setting("maintenance_mode", False),
                key="maintenance_mode",
            )

    def _render_security_settings(self):
        """Render security settings"""
        st.markdown("## üîí ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")

        # Password Policy
        st.markdown("### üîê ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")
        col1, col2 = st.columns(2)

        with col1:
            min_password_length = st.number_input(
                "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥",
                min_value=6,
                max_value=20,
                value=self._get_setting("min_password_length", 8),
                key="min_password_length",
            )

            require_uppercase = st.checkbox(
                "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà",
                value=self._get_setting("require_uppercase", True),
                key="require_uppercase",
            )

            require_numbers = st.checkbox(
                "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç",
                value=self._get_setting("require_numbers", True),
                key="require_numbers",
            )

        with col2:
            password_expiry = st.number_input(
                "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏ß‡∏±‡∏ô)",
                min_value=0,
                max_value=365,
                value=self._get_setting("password_expiry", 90),
                key="password_expiry",
            )

            require_special_chars = st.checkbox(
                "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©",
                value=self._get_setting("require_special_chars", True),
                key="require_special_chars",
            )

            max_login_attempts = st.number_input(
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
                min_value=3,
                max_value=10,
                value=self._get_setting("max_login_attempts", 5),
                key="max_login_attempts",
            )

        # Two-Factor Authentication
        st.markdown("---")
        st.markdown("### üîê ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≠‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô")

        col1, col2 = st.columns(2)

        with col1:
            enable_2fa = st.checkbox(
                "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô 2FA",
                value=self._get_setting("enable_2fa", False),
                key="enable_2fa",
            )

            if enable_2fa:
                twofa_methods = st.multiselect(
                    "‡∏ß‡∏¥‡∏ò‡∏µ 2FA",
                    options=["SMS", "Email", "Authenticator App"],
                    default=["Email"],
                    key="twofa_methods",
                )

        with col2:
            if enable_2fa:
                mandatory_2fa = st.checkbox(
                    "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ 2FA ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin",
                    value=self._get_setting("mandatory_2fa", True),
                    key="mandatory_2fa",
                )

                twofa_backup_codes = st.number_input(
                    "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≥‡∏£‡∏≠‡∏á",
                    min_value=5,
                    max_value=20,
                    value=self._get_setting("twofa_backup_codes", 10),
                    key="twofa_backup_codes",
                )

        # Security Monitoring
        st.markdown("---")
        st.markdown("### üëÅÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")

        col1, col2 = st.columns(2)

        with col1:
            log_failed_logins = st.checkbox(
                "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
                value=self._get_setting("log_failed_logins", True),
                key="log_failed_logins",
            )

            alert_suspicious_activity = st.checkbox(
                "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢",
                value=self._get_setting("alert_suspicious_activity", True),
                key="alert_suspicious_activity",
            )

        with col2:
            auto_lockout_duration = st.number_input(
                "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ô‡∏≤‡∏ó‡∏µ)",
                min_value=5,
                max_value=1440,
                value=self._get_setting("auto_lockout_duration", 30),
                key="auto_lockout_duration",
            )

            ip_whitelist = st.text_area(
                "IP Whitelist (‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡πà‡∏≠ IP)",
                value=self._get_setting("ip_whitelist", ""),
                key="ip_whitelist",
            )

    def _render_database_settings(self):
        """Render database settings"""
        st.markdown("## üóÑÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

        # Connection Settings
        st.markdown("### üîå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
        col1, col2 = st.columns(2)

        with col1:
            db_host = st.text_input(
                "‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
                value=self._get_setting("db_host", "localhost"),
                key="db_host",
            )

            db_port = st.number_input(
                "‡∏û‡∏≠‡∏£‡πå‡∏ï",
                min_value=1,
                max_value=65535,
                value=self._get_setting("db_port", 1433),
                key="db_port",
            )

            db_name = st.text_input(
                "‡∏ä‡∏∑‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                value=self._get_setting("db_name", "SDXProjectManager"),
                key="db_name",
            )

        with col2:
            connection_pool_size = st.number_input(
                "‡∏Ç‡∏ô‡∏≤‡∏î Connection Pool",
                min_value=5,
                max_value=100,
                value=self._get_setting("connection_pool_size", 20),
                key="connection_pool_size",
            )

            query_timeout = st.number_input(
                "Timeout ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)",
                min_value=10,
                max_value=300,
                value=self._get_setting("query_timeout", 30),
                key="query_timeout",
            )

            enable_ssl = st.checkbox(
                "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô SSL",
                value=self._get_setting("enable_ssl", True),
                key="enable_ssl",
            )

        # Performance Settings
        st.markdown("---")
        st.markdown("### ‚ö° ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")

        col1, col2 = st.columns(2)

        with col1:
            enable_query_cache = st.checkbox(
                "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Query Cache",
                value=self._get_setting("enable_query_cache", True),
                key="enable_query_cache",
            )

            cache_size_mb = st.number_input(
                "‡∏Ç‡∏ô‡∏≤‡∏î Cache (MB)",
                min_value=50,
                max_value=1000,
                value=self._get_setting("cache_size_mb", 200),
                key="cache_size_mb",
            )

        with col2:
            auto_vacuum = st.checkbox(
                "Auto Vacuum",
                value=self._get_setting("auto_vacuum", True),
                key="auto_vacuum",
            )

            backup_retention_days = st.number_input(
                "‡πÄ‡∏Å‡πá‡∏ö Backup (‡∏ß‡∏±‡∏ô)",
                min_value=7,
                max_value=365,
                value=self._get_setting("backup_retention_days", 30),
                key="backup_retention_days",
            )

        # Test Connection
        st.markdown("---")
        if st.button("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"):
            self._test_database_connection()

    def _render_email_settings(self):
        """Render email settings"""
        st.markdown("## üìß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•")

        # SMTP Configuration
        st.markdown("### üìÆ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SMTP")
        col1, col2 = st.columns(2)

        with col1:
            smtp_server = st.text_input(
                "‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SMTP",
                value=self._get_setting("smtp_server", "smtp.gmail.com"),
                key="smtp_server",
            )

            smtp_port = st.number_input(
                "‡∏û‡∏≠‡∏£‡πå‡∏ï SMTP",
                min_value=25,
                max_value=587,
                value=self._get_setting("smtp_port", 587),
                key="smtp_port",
            )

            smtp_username = st.text_input(
                "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
                value=self._get_setting("smtp_username", ""),
                key="smtp_username",
            )

        with col2:
            smtp_password = st.text_input(
                "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
                type="password",
                value=self._get_setting("smtp_password", ""),
                key="smtp_password",
            )

            use_tls = st.checkbox(
                "‡πÉ‡∏ä‡πâ TLS", value=self._get_setting("use_tls", True), key="use_tls"
            )

            from_email = st.text_input(
                "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á",
                value=self._get_setting("from_email", "noreply@denso.com"),
                key="from_email",
            )

        # Email Templates
        st.markdown("---")
        st.markdown("### üìÑ ‡πÅ‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•")

        template_type = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏°‡πà‡πÅ‡∏ö‡∏ö",
            options=["‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö", "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", "‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"],
            key="template_type",
        )

        email_template = st.text_area(
            "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏°‡πà‡πÅ‡∏ö‡∏ö",
            value=self._get_email_template(template_type),
            height=200,
            key="email_template",
        )

        # Test Email
        st.markdown("---")
        col1, col2 = st.columns(2)

        with col1:
            test_email = st.text_input("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö", key="test_email")

        with col2:
            if st.button("üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö"):
                self._send_test_email(test_email)

    def _render_theme_settings(self):
        """Render theme and UI settings"""
        st.markdown("## üé® ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤")

        # Color Scheme
        st.markdown("### üåà ‡πÇ‡∏ó‡∏ô‡∏™‡∏µ")
        col1, col2, col3 = st.columns(3)

        with col1:
            primary_color = st.color_picker(
                "‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å",
                value=self._get_setting("primary_color", "#6f42c1"),
                key="primary_color",
            )

            secondary_color = st.color_picker(
                "‡∏™‡∏µ‡∏£‡∏≠‡∏á",
                value=self._get_setting("secondary_color", "#6c757d"),
                key="secondary_color",
            )

        with col2:
            success_color = st.color_picker(
                "‡∏™‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                value=self._get_setting("success_color", "#28a745"),
                key="success_color",
            )

            warning_color = st.color_picker(
                "‡∏™‡∏µ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
                value=self._get_setting("warning_color", "#ffc107"),
                key="warning_color",
            )

        with col3:
            danger_color = st.color_picker(
                "‡∏™‡∏µ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢",
                value=self._get_setting("danger_color", "#dc3545"),
                key="danger_color",
            )

            info_color = st.color_picker(
                "‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                value=self._get_setting("info_color", "#17a2b8"),
                key="info_color",
            )

        # Layout Settings
        st.markdown("---")
        st.markdown("### üìê ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á")

        col1, col2 = st.columns(2)

        with col1:
            sidebar_expanded = st.checkbox(
                "‡∏Ç‡∏¢‡∏≤‡∏¢ Sidebar ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
                value=self._get_setting("sidebar_expanded", True),
                key="sidebar_expanded",
            )

            show_footer = st.checkbox(
                "‡πÅ‡∏™‡∏î‡∏á Footer",
                value=self._get_setting("show_footer", True),
                key="show_footer",
            )

            dark_mode = st.checkbox(
                "‡πÇ‡∏´‡∏°‡∏î‡∏°‡∏∑‡∏î", value=self._get_setting("dark_mode", False), key="dark_mode"
            )

        with col2:
            font_family = st.selectbox(
                "‡∏ü‡∏≠‡∏ô‡∏ï‡πå",
                options=["sans serif", "serif", "monospace", "Kanit", "Prompt"],
                index=0,
                key="font_family",
            )

            font_size = st.selectbox(
                "‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå", options=["‡πÄ‡∏•‡πá‡∏Å", "‡∏õ‡∏Å‡∏ï‡∏¥", "‡πÉ‡∏´‡∏ç‡πà"], index=1, key="font_size"
            )

            animation_enabled = st.checkbox(
                "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Animation",
                value=self._get_setting("animation_enabled", True),
                key="animation_enabled",
            )

        # Preview
        st.markdown("---")
        st.markdown("### üëÅÔ∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
        if st.button("üîÑ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ò‡∏µ‡∏°"):
            self._preview_theme()

    def _render_user_settings(self):
        """Render user management settings"""
        st.markdown("## üë• ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

        # User Registration
        st.markdown("### üìù ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô")
        col1, col2 = st.columns(2)

        with col1:
            allow_registration = st.checkbox(
                "‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏≠‡∏á",
                value=self._get_setting("allow_registration", False),
                key="allow_registration",
            )

            require_email_verification = st.checkbox(
                "‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
                value=self._get_setting("require_email_verification", True),
                key="require_email_verification",
            )

            default_user_role = st.selectbox(
                "‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
                options=["User", "Viewer", "Developer"],
                index=0,
                key="default_user_role",
            )

        with col2:
            max_users = st.number_input(
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
                min_value=10,
                max_value=10000,
                value=self._get_setting("max_users", 1000),
                key="max_users",
            )

            inactive_user_cleanup = st.number_input(
                "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏ß‡∏±‡∏ô)",
                min_value=30,
                max_value=365,
                value=self._get_setting("inactive_user_cleanup", 180),
                key="inactive_user_cleanup",
            )

            force_password_change = st.checkbox(
                "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å",
                value=self._get_setting("force_password_change", True),
                key="force_password_change",
            )

        # User Activity
        st.markdown("---")
        st.markdown("### üìä ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

        # Current users table
        users_data = self._get_users_data()
        if users_data:
            st.dataframe(
                users_data,
                use_container_width=True,
                column_config={
                    "LastLogin": st.column_config.DatetimeColumn("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"),
                    "Status": st.column_config.TextColumn("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"),
                },
            )

        # User actions
        col1, col2, col3 = st.columns(3)

        with col1:
            if st.button("üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
                self._send_bulk_email()

        with col2:
            if st.button("üîí ‡∏•‡πá‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"):
                self._lock_inactive_users()

        with col3:
            if st.button("üìä ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"):
                self._export_users_data()

    def _render_system_settings(self):
        """Render system performance settings"""
        st.markdown("## üíª ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö")

        # Performance Settings
        st.markdown("### ‚ö° ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")
        col1, col2 = st.columns(2)

        with col1:
            max_concurrent_users = st.number_input(
                "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
                min_value=10,
                max_value=1000,
                value=self._get_setting("max_concurrent_users", 100),
                key="max_concurrent_users",
            )

            request_timeout = st.number_input(
                "Timeout ‡∏Ñ‡∏≥‡∏Ç‡∏≠ (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)",
                min_value=30,
                max_value=300,
                value=self._get_setting("request_timeout", 60),
                key="request_timeout",
            )

            enable_compression = st.checkbox(
                "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Compression",
                value=self._get_setting("enable_compression", True),
                key="enable_compression",
            )

        with col2:
            log_level = st.selectbox(
                "‡∏£‡∏∞‡∏î‡∏±‡∏ö Log",
                options=["DEBUG", "INFO", "WARNING", "ERROR"],
                index=1,
                key="log_level",
            )

            log_retention_days = st.number_input(
                "‡πÄ‡∏Å‡πá‡∏ö Log (‡∏ß‡∏±‡∏ô)",
                min_value=7,
                max_value=365,
                value=self._get_setting("log_retention_days", 30),
                key="log_retention_days",
            )

            enable_monitoring = st.checkbox(
                "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Monitoring",
                value=self._get_setting("enable_monitoring", True),
                key="enable_monitoring",
            )

        # System Resources
        st.markdown("---")
        st.markdown("### üìä ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏£‡∏∞‡∏ö‡∏ö")

        # System metrics
        system_metrics = self._get_system_metrics()

        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric("CPU Usage", f"{system_metrics['cpu']}%")

        with col2:
            st.metric("Memory Usage", f"{system_metrics['memory']}%")

        with col3:
            st.metric("Disk Usage", f"{system_metrics['disk']}%")

        with col4:
            st.metric("Network I/O", f"{system_metrics['network']} MB/s")

        # System processes
        st.markdown("### üîÑ ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö")
        processes_data = self._get_processes_data()
        if processes_data:
            st.dataframe(processes_data, use_container_width=True)

    def _render_backup_settings(self):
        """Render backup and recovery settings"""
        st.markdown("## üíæ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

        # Backup Schedule
        st.markdown("### ‚è∞ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        col1, col2 = st.columns(2)

        with col1:
            auto_backup = st.checkbox(
                "‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
                value=self._get_setting("auto_backup", True),
                key="auto_backup",
            )

            if auto_backup:
                backup_frequency = st.selectbox(
                    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà",
                    options=["‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô", "‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"],
                    index=0,
                    key="backup_frequency",
                )

                backup_time = st.time_input(
                    "‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                    value=datetime.strptime("02:00", "%H:%M").time(),
                    key="backup_time",
                )

        with col2:
            backup_location = st.text_input(
                "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                value=self._get_setting("backup_location", "/backup"),
                key="backup_location",
            )

            max_backups = st.number_input(
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
                min_value=3,
                max_value=30,
                value=self._get_setting("max_backups", 7),
                key="max_backups",
            )

            compress_backups = st.checkbox(
                "‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á",
                value=self._get_setting("compress_backups", True),
                key="compress_backups",
            )

        # Backup History
        st.markdown("---")
        st.markdown("### üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

        backup_history = self._get_backup_history()
        if backup_history:
            st.dataframe(
                backup_history,
                use_container_width=True,
                column_config={
                    "Date": st.column_config.DatetimeColumn("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"),
                    "Size": st.column_config.TextColumn("‡∏Ç‡∏ô‡∏≤‡∏î"),
                    "Status": st.column_config.TextColumn("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"),
                },
            )

        # Backup Actions
        col1, col2, col3 = st.columns(3)

        with col1:
            if st.button("üíæ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ"):
                self._create_backup()

        with col2:
            if st.button("üì• ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
                self._restore_backup()

        with col3:
            if st.button("üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤"):
                self._cleanup_old_backups()

    def _render_integration_settings(self):
        """Render integration settings"""
        st.markdown("## üîå ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")

        # Available Integrations
        integrations = [
            {"name": "Microsoft Teams", "status": "Connected", "icon": "üí¨"},
            {"name": "Slack", "status": "Disconnected", "icon": "üí¨"},
            {"name": "Jira", "status": "Connected", "icon": "üé´"},
            {"name": "GitHub", "status": "Disconnected", "icon": "üêô"},
            {"name": "Azure DevOps", "status": "Connected", "icon": "üîß"},
            {"name": "Google Drive", "status": "Disconnected", "icon": "üìÅ"},
        ]

        st.markdown("### üîó ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ")

        for integration in integrations:
            with st.container():
                col1, col2, col3, col4 = st.columns([1, 3, 2, 2])

                with col1:
                    st.markdown(integration["icon"])

                with col2:
                    st.markdown(f"**{integration['name']}**")

                with col3:
                    status_color = (
                        "green" if integration["status"] == "Connected" else "red"
                    )
                    st.markdown(
                        f"<span style='color:{status_color}'>{integration['status']}</span>",
                        unsafe_allow_html=True,
                    )

                with col4:
                    if integration["status"] == "Connected":
                        if st.button("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", key=f"config_{integration['name']}"):
                            self._configure_integration(integration["name"])
                    else:
                        if st.button("üîå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", key=f"connect_{integration['name']}"):
                            self._connect_integration(integration["name"])

        # API Settings
        st.markdown("---")
        st.markdown("### üîë ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API")

        col1, col2 = st.columns(2)

        with col1:
            enable_api = st.checkbox(
                "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API",
                value=self._get_setting("enable_api", True),
                key="enable_api",
            )

            api_rate_limit = st.number_input(
                "Rate Limit (requests/minute)",
                min_value=10,
                max_value=1000,
                value=self._get_setting("api_rate_limit", 100),
                key="api_rate_limit",
            )

        with col2:
            api_key_expiry = st.number_input(
                "API Key ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏ß‡∏±‡∏ô)",
                min_value=30,
                max_value=365,
                value=self._get_setting("api_key_expiry", 90),
                key="api_key_expiry",
            )

            require_https = st.checkbox(
                "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ HTTPS",
                value=self._get_setting("require_https", True),
                key="require_https",
            )

    def _render_audit_settings(self):
        """Render audit and logging settings"""
        st.markdown("## üìã ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

        # Audit Configuration
        st.markdown("### üìä ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        col1, col2 = st.columns(2)

        with col1:
            enable_audit_log = st.checkbox(
                "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Audit Log",
                value=self._get_setting("enable_audit_log", True),
                key="enable_audit_log",
            )

            log_user_actions = st.checkbox(
                "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
                value=self._get_setting("log_user_actions", True),
                key="log_user_actions",
            )

            log_data_changes = st.checkbox(
                "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                value=self._get_setting("log_data_changes", True),
                key="log_data_changes",
            )

        with col2:
            audit_retention_days = st.number_input(
                "‡πÄ‡∏Å‡πá‡∏ö Audit Log (‡∏ß‡∏±‡∏ô)",
                min_value=30,
                max_value=2555,  # 7 years
                value=self._get_setting("audit_retention_days", 365),
                key="audit_retention_days",
            )

            export_audit_log = st.checkbox(
                "‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Audit Log",
                value=self._get_setting("export_audit_log", True),
                key="export_audit_log",
            )

            real_time_alerts = st.checkbox(
                "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå",
                value=self._get_setting("real_time_alerts", False),
                key="real_time_alerts",
            )

        # Recent Audit Logs
        st.markdown("---")
        st.markdown("### üìú ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")

        audit_logs = self._get_recent_audit_logs()
        if audit_logs:
            st.dataframe(
                audit_logs,
                use_container_width=True,
                column_config={
                    "Timestamp": st.column_config.DatetimeColumn("‡πÄ‡∏ß‡∏•‡∏≤"),
                    "User": st.column_config.TextColumn("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"),
                    "Action": st.column_config.TextColumn("‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥"),
                    "Resource": st.column_config.TextColumn("‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£"),
                },
            )

        # Export audit logs
        if st.button("üìä ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"):
            self._export_audit_logs()

    def _render_settings_footer(self):
        """Render settings page footer"""
        st.markdown("---")

        col1, col2, col3 = st.columns([1, 1, 1])

        with col1:
            if st.button("üîÑ ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏£‡∏∞‡∏ö‡∏ö", type="secondary"):
                self._restart_system()

        with col2:
            if st.button("üßπ ‡∏•‡πâ‡∏≤‡∏á Cache", type="secondary"):
                self._clear_cache()

        with col3:
            if st.button("üìä ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"):
                self._export_settings()

        # Settings info
        st.markdown("---")
        st.info("üí° ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏£‡∏∞‡∏ö‡∏ö")

        # Last modified info
        last_modified = self._get_last_settings_update()
        st.markdown(f"*‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {last_modified}*")

    # Helper methods
    def _get_setting(self, key: str, default: Any = None) -> Any:
        """Get setting value"""
        try:
            return self.settings_manager.get_setting(key, default)
        except Exception as e:
            logger.error(f"Error getting setting {key}: {e}")
            return default

    def _save_all_settings(self):
        """Save all current settings"""
        try:
            # Get all settings from session state
            settings_to_save = {}

            for key in st.session_state:
                if not key.startswith("_"):  # Skip internal streamlit keys
                    settings_to_save[key] = st.session_state[key]

            # Save to database
            for key, value in settings_to_save.items():
                self.settings_manager.set_setting(key, value)

            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

        except Exception as e:
            logger.error(f"Error saving settings: {e}")
            st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")

    def _reset_to_defaults(self):
        """Reset all settings to defaults"""
        if st.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"):
            try:
                self.settings_manager.reset_to_defaults()
                st.success("‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                st.rerun()
            except Exception as e:
                logger.error(f"Error resetting settings: {e}")
                st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")

    def _get_system_uptime(self) -> str:
        """Get system uptime"""
        return "3 ‡∏ß‡∏±‡∏ô 12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"  # Placeholder

    def _get_memory_usage(self) -> float:
        """Get memory usage percentage"""
        return 67.5  # Placeholder

    def _get_db_connections(self) -> int:
        """Get database connection count"""
        return 15  # Placeholder

    def _get_last_backup_time(self) -> str:
        """Get last backup time"""
        return "2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"  # Placeholder

    def _get_email_template(self, template_type: str) -> str:
        """Get email template"""
        templates = {
            "‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö": "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà SDX Project Manager!\n\n‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {username}\n‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {password}",
            "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô": "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: {reset_link}",
            "‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà: {message}",
            "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô": "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÅ‡∏ô‡∏ö‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢",
        }
        return templates.get(template_type, "")

    def _test_database_connection(self):
        """Test database connection"""
        try:
            # Simulate database test
            import time

            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠..."):
                time.sleep(2)
            st.success("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            st.error(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}")

    def _send_test_email(self, email: str):
        """Send test email"""
        if not email:
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
            return

        try:
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö..."):
                import time

                time.sleep(2)
            st.success(f"‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á {email} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        except Exception as e:
            st.error(f"‚ùå ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}")

    def _preview_theme(self):
        """Preview theme changes"""
        st.info("üé® ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ò‡∏µ‡∏°‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _get_users_data(self) -> pd.DataFrame:
        """Get users data for display"""
        # Sample data
        return pd.DataFrame(
            {
                "Username": ["admin", "john_doe", "jane_smith"],
                "Role": ["Admin", "User", "Manager"],
                "LastLogin": [
                    "2024-01-15 10:30",
                    "2024-01-14 16:45",
                    "2024-01-15 08:15",
                ],
                "Status": ["Active", "Active", "Inactive"],
            }
        )

    def _get_system_metrics(self) -> Dict[str, float]:
        """Get system performance metrics"""
        return {"cpu": 45.2, "memory": 67.8, "disk": 52.1, "network": 15.3}

    def _get_processes_data(self) -> pd.DataFrame:
        """Get running processes data"""
        return pd.DataFrame(
            {
                "Process": ["streamlit", "nginx", "postgres"],
                "CPU (%)": [15.2, 5.1, 8.7],
                "Memory (MB)": [256, 128, 512],
                "Status": ["Running", "Running", "Running"],
            }
        )

    def _get_backup_history(self) -> pd.DataFrame:
        """Get backup history"""
        return pd.DataFrame(
            {
                "Date": ["2024-01-15 02:00", "2024-01-14 02:00", "2024-01-13 02:00"],
                "Size": ["2.1 GB", "2.0 GB", "1.9 GB"],
                "Status": ["Success", "Success", "Failed"],
                "Duration": ["15 min", "12 min", "8 min"],
            }
        )

    def _get_recent_audit_logs(self) -> pd.DataFrame:
        """Get recent audit logs"""
        return pd.DataFrame(
            {
                "Timestamp": [
                    "2024-01-15 10:30",
                    "2024-01-15 10:25",
                    "2024-01-15 10:20",
                ],
                "User": ["admin", "john_doe", "jane_smith"],
                "Action": ["Login", "Create Task", "Update Project"],
                "Resource": ["System", "Task #123", "Project ABC"],
                "IP Address": ["192.168.1.100", "192.168.1.101", "192.168.1.102"],
            }
        )

    def _get_last_settings_update(self) -> str:
        """Get last settings update time"""
        return "2024-01-15 10:30:00"

    # Action methods (placeholders)
    def _send_bulk_email(self):
        st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _lock_inactive_users(self):
        st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏•‡πá‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _export_users_data(self):
        st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _create_backup(self):
        st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _restore_backup(self):
        st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _cleanup_old_backups(self):
        st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _configure_integration(self, name: str):
        st.info(f"üöß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ {name} ‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _connect_integration(self, name: str):
        st.info(f"üöß ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ {name} ‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _export_audit_logs(self):
        st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _restart_system(self):
        st.warning("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")

    def _clear_cache(self):
        st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏•‡πâ‡∏≤‡∏á Cache ‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _export_settings(self):
        st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")


# Main render function
def render_settings_ui(db_manager, theme_manager: ThemeManager):
    """Main function to render settings UI"""
    try:
        settings_ui = SettingsUI(db_manager, theme_manager)
        settings_ui.render_settings_page()
    except Exception as e:
        logger.error(f"Error rendering settings UI: {e}")
        st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
