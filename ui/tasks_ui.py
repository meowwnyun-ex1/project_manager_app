#!/usr/bin/env python3
"""
tasks_ui.py
SDX Project Manager - Enterprise Task Management Interface
Professional Kanban board, task tracking, and comprehensive task management
"""

import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
import numpy as np
from datetime import datetime, timedelta, date, time
from typing import Dict, List, Any, Optional, Tuple
import logging
from dataclasses import dataclass
from enum import Enum
import json

# Import project modules
from tasks import TaskManager, TaskStatus, TaskPriority, TaskType, WorkType
from projects import ProjectManager
from users import UserManager
from ui_components import UIComponents, ThemeManager
from error_handler import ErrorHandler, handle_errors

logger = logging.getLogger(__name__)


class TaskViewMode(Enum):
    """Task view modes"""

    KANBAN = "kanban"
    LIST = "list"
    CALENDAR = "calendar"
    TIMELINE = "timeline"


class TaskFilter(Enum):
    """Task filter types"""

    ALL = "all"
    MY_TASKS = "my_tasks"
    OVERDUE = "overdue"
    THIS_WEEK = "this_week"
    HIGH_PRIORITY = "high_priority"
    BLOCKED = "blocked"


@dataclass
class TaskUIConfig:
    """Task UI configuration"""

    auto_refresh: bool = True
    refresh_interval: int = 60  # seconds
    kanban_columns: List[str] = None
    show_avatars: bool = True
    show_time_tracking: bool = True
    drag_drop_enabled: bool = True

    def __post_init__(self):
        if self.kanban_columns is None:
            self.kanban_columns = [
                "Backlog",
                "To Do",
                "In Progress",
                "Review",
                "Testing",
                "Done",
            ]


class TasksUI:
    """Enterprise Task Management Interface"""

    def __init__(self, db_manager, theme_manager: ThemeManager):
        self.db = db_manager
        self.task_manager = TaskManager(db_manager)
        self.project_manager = ProjectManager(db_manager)
        self.user_manager = UserManager(db_manager)
        self.theme = theme_manager
        self.ui_components = UIComponents(theme_manager)
        self.error_handler = ErrorHandler()
        self.config = TaskUIConfig()

    @handle_errors
    def render_tasks_page(self):
        """Main tasks page renderer"""
        st.markdown("# ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô")

        # Page header with controls
        self._render_page_header()

        # View mode selector
        view_mode = self._render_view_selector()

        # Main content based on view mode
        if view_mode == TaskViewMode.KANBAN:
            self._render_kanban_board()
        elif view_mode == TaskViewMode.LIST:
            self._render_task_list()
        elif view_mode == TaskViewMode.CALENDAR:
            self._render_task_calendar()
        elif view_mode == TaskViewMode.TIMELINE:
            self._render_task_timeline()

    def _render_page_header(self):
        """Render page header with controls"""
        col1, col2, col3, col4 = st.columns([2, 1, 1, 1])

        with col1:
            st.markdown("### üìã ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

        with col2:
            if st.button("‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="primary"):
                self._show_create_task_modal()

        with col3:
            if st.button("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏á‡∏≤‡∏ô"):
                self._show_task_analytics()

        with col4:
            if st.button("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"):
                self._show_task_settings()

    def _render_view_selector(self) -> TaskViewMode:
        """Render view mode selector"""
        col1, col2, col3 = st.columns([2, 2, 2])

        with col1:
            # Filter selector
            filter_option = st.selectbox(
                "üîç ‡∏Å‡∏£‡∏≠‡∏á",
                options=[
                    "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                    "‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô",
                    "‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
                    "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ",
                    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á",
                    "‡∏á‡∏≤‡∏ô‡∏ï‡∏¥‡∏î‡∏Ç‡∏±‡∏î",
                ],
                key="task_filter",
            )

            # Store filter in session state
            st.session_state.task_filter = self._map_filter_option(filter_option)

        with col2:
            # Project selector
            projects = self.project_manager.get_all_projects()
            project_names = ["‡∏ó‡∏∏‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"] + [p["Name"] for p in projects]
            selected_project = st.selectbox(
                "üìÅ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", options=project_names, key="project_filter"
            )

            if selected_project != "‡∏ó‡∏∏‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£":
                project_id = next(
                    (p["ID"] for p in projects if p["Name"] == selected_project), None
                )
                st.session_state.selected_project_id = project_id
            else:
                st.session_state.selected_project_id = None

        with col3:
            # View mode selector
            view_mode = st.selectbox(
                "üëÅÔ∏è ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á",
                options=["üìã Kanban", "üìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "üìÖ ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô", "üìà ‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå"],
                key="view_mode",
            )

            return self._map_view_mode(view_mode)

    def _map_filter_option(self, option: str) -> TaskFilter:
        """Map filter option to enum"""
        mapping = {
            "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": TaskFilter.ALL,
            "‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô": TaskFilter.MY_TASKS,
            "‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î": TaskFilter.OVERDUE,
            "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ": TaskFilter.THIS_WEEK,
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á": TaskFilter.HIGH_PRIORITY,
            "‡∏á‡∏≤‡∏ô‡∏ï‡∏¥‡∏î‡∏Ç‡∏±‡∏î": TaskFilter.BLOCKED,
        }
        return mapping.get(option, TaskFilter.ALL)

    def _map_view_mode(self, option: str) -> TaskViewMode:
        """Map view mode option to enum"""
        mapping = {
            "üìã Kanban": TaskViewMode.KANBAN,
            "üìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£": TaskViewMode.LIST,
            "üìÖ ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô": TaskViewMode.CALENDAR,
            "üìà ‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå": TaskViewMode.TIMELINE,
        }
        return mapping.get(option, TaskViewMode.KANBAN)

    @handle_errors
    def _render_kanban_board(self):
        """Render Kanban board view"""
        st.markdown("---")
        st.markdown("### üìã Kanban Board")

        # Get filtered tasks
        tasks = self._get_filtered_tasks()

        if not tasks:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")
            return

        # Organize tasks by status
        kanban_data = self._organize_tasks_by_status(tasks)

        # Render Kanban columns
        columns = st.columns(len(self.config.kanban_columns))

        for idx, status in enumerate(self.config.kanban_columns):
            with columns[idx]:
                self._render_kanban_column(status, kanban_data.get(status, []))

    def _render_kanban_column(self, status: str, tasks: List[Dict[str, Any]]):
        """Render individual Kanban column"""
        # Column header
        task_count = len(tasks)
        header_color = self._get_status_color(status)

        st.markdown(
            f"""
            <div style="background: linear-gradient(135deg, {header_color}20, {header_color}40); 
                        padding: 10px; border-radius: 10px; margin-bottom: 10px; 
                        border-left: 4px solid {header_color};">
                <h4 style="margin: 0; color: {header_color};">
                    {status} ({task_count})
                </h4>
            </div>
            """,
            unsafe_allow_html=True,
        )

        # Tasks in column
        for task in tasks:
            self._render_task_card(task)

        # Add task button
        if st.button(f"‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏ô {status}", key=f"add_task_{status}"):
            self._show_quick_task_form(status)

    def _render_task_card(self, task: Dict[str, Any]):
        """Render individual task card"""
        # Determine card styling
        priority_color = self._get_priority_color(task["Priority"])
        is_overdue = self._is_task_overdue(task)

        # Card styling
        card_style = f"""
        background: white;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 8px;
        border-left: 4px solid {priority_color};
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        """

        if is_overdue:
            card_style += "border: 2px solid #ff4444;"

        with st.container():
            st.markdown(f'<div style="{card_style}">', unsafe_allow_html=True)

            # Task title and priority
            col1, col2 = st.columns([3, 1])
            with col1:
                st.markdown(f"**{task['Title']}**")
            with col2:
                priority_badge = self.ui_components.render_priority_badge(
                    task["Priority"]
                )
                st.markdown(priority_badge, unsafe_allow_html=True)

            # Task details
            if task.get("Description"):
                description = (
                    task["Description"][:50] + "..."
                    if len(task["Description"]) > 50
                    else task["Description"]
                )
                st.markdown(f"*{description}*")

            # Task metadata
            col1, col2 = st.columns(2)
            with col1:
                if task.get("AssignedToName"):
                    st.markdown(f"üë§ {task['AssignedToName']}")
                if task.get("DueDate"):
                    due_date = task["DueDate"].strftime("%d/%m/%Y")
                    st.markdown(f"üìÖ {due_date}")

            with col2:
                if task.get("EstimatedHours"):
                    st.markdown(f"‚è±Ô∏è {task['EstimatedHours']}h")
                if task.get("ProjectName"):
                    st.markdown(f"üìÅ {task['ProjectName']}")

            # Progress bar
            if task.get("ProgressPercentage"):
                progress = task["ProgressPercentage"] / 100
                st.progress(progress)
                st.markdown(
                    f"<small>{task['ProgressPercentage']}% ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</small>",
                    unsafe_allow_html=True,
                )

            # Action buttons
            col1, col2, col3 = st.columns(3)
            with col1:
                if st.button("üëÅÔ∏è", key=f"view_{task['ID']}", help="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"):
                    self._show_task_details(task["ID"])
            with col2:
                if st.button("‚úèÔ∏è", key=f"edit_{task['ID']}", help="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"):
                    self._show_edit_task_modal(task["ID"])
            with col3:
                if st.button("‚è±Ô∏è", key=f"time_{task['ID']}", help="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤"):
                    self._show_time_tracking_modal(task["ID"])

            st.markdown("</div>", unsafe_allow_html=True)

    def _render_task_list(self):
        """Render list view of tasks"""
        st.markdown("---")
        st.markdown("### üìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô")

        # Get filtered tasks
        tasks = self._get_filtered_tasks()

        if not tasks:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")
            return

        # Search functionality
        search_term = st.text_input(
            "üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô", placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô, ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î, ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö..."
        )

        # Filter tasks by search
        if search_term:
            tasks = [
                t
                for t in tasks
                if search_term.lower() in t["Title"].lower()
                or (
                    t.get("Description")
                    and search_term.lower() in t["Description"].lower()
                )
                or (
                    t.get("AssignedToName")
                    and search_term.lower() in t["AssignedToName"].lower()
                )
            ]

        # Sort options
        col1, col2 = st.columns(2)
        with col1:
            sort_by = st.selectbox(
                "‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°", options=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á", "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô"]
            )
        with col2:
            sort_order = st.selectbox("‡∏•‡∏≥‡∏î‡∏±‡∏ö", options=["‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô", "‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô"])

        # Sort tasks
        tasks = self._sort_tasks(tasks, sort_by, sort_order)

        # Pagination
        items_per_page = 20
        total_pages = (len(tasks) + items_per_page - 1) // items_per_page

        if total_pages > 1:
            page = st.selectbox("‡∏´‡∏ô‡πâ‡∏≤", options=list(range(1, total_pages + 1)), index=0)
            start_idx = (page - 1) * items_per_page
            end_idx = start_idx + items_per_page
            tasks = tasks[start_idx:end_idx]

        # Render task table
        self._render_task_table(tasks)

    def _render_task_table(self, tasks: List[Dict[str, Any]]):
        """Render tasks in table format"""
        if not tasks:
            return

        # Create DataFrame
        df_data = []
        for task in tasks:
            df_data.append(
                {
                    "ID": task["ID"],
                    "‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô": task["Title"],
                    "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£": task.get("ProjectName", "N/A"),
                    "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö": task.get("AssignedToName", "N/A"),
                    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": task["Status"],
                    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç": task["Priority"],
                    "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á": (
                        task["DueDate"].strftime("%d/%m/%Y")
                        if task.get("DueDate")
                        else "N/A"
                    ),
                    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤": f"{task.get('ProgressPercentage', 0)}%",
                    "‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì": f"{task.get('EstimatedHours', 0)}h",
                    "‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á": f"{task.get('ActualHours', 0)}h",
                }
            )

        df = pd.DataFrame(df_data)

        # Configure column display
        column_config = {
            "ID": st.column_config.NumberColumn("ID", width="small"),
            "‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô": st.column_config.TextColumn("‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô", width="large"),
            "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£": st.column_config.TextColumn("‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", width="medium"),
            "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö": st.column_config.TextColumn("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö", width="medium"),
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": st.column_config.TextColumn("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", width="small"),
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç": st.column_config.TextColumn("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", width="small"),
            "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á": st.column_config.TextColumn("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á", width="small"),
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤": st.column_config.TextColumn("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤", width="small"),
            "‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì": st.column_config.TextColumn("‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", width="small"),
            "‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á": st.column_config.TextColumn("‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á", width="small"),
        }

        # Display table with selection
        selected_rows = st.dataframe(
            df,
            column_config=column_config,
            use_container_width=True,
            hide_index=True,
            on_select="rerun",
            selection_mode="multi-row",
        )

        # Bulk actions for selected rows
        if selected_rows and len(selected_rows.selection.rows) > 0:
            self._render_bulk_actions(selected_rows.selection.rows, tasks)

    def _render_bulk_actions(
        self, selected_indices: List[int], tasks: List[Dict[str, Any]]
    ):
        """Render bulk action buttons"""
        st.markdown("### ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°")

        col1, col2, col3, col4 = st.columns(4)

        with col1:
            if st.button("‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"):
                self._show_bulk_status_update(selected_indices, tasks)

        with col2:
            if st.button("üë§ ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢"):
                self._show_bulk_assignment(selected_indices, tasks)

        with col3:
            if st.button("üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤"):
                self._show_bulk_due_date_update(selected_indices, tasks)

        with col4:
            if st.button("üóëÔ∏è ‡∏•‡∏ö", type="secondary"):
                self._show_bulk_delete_confirmation(selected_indices, tasks)

    def _render_task_calendar(self):
        """Render calendar view of tasks"""
        st.markdown("---")
        st.markdown("### üìÖ ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏á‡∏≤‡∏ô")

        # Calendar implementation would go here
        # This is a placeholder for calendar functionality
        st.info("üöß ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

        # Show tasks by date
        tasks = self._get_filtered_tasks()
        tasks_by_date = self._group_tasks_by_date(tasks)

        # Simple date-based display
        for task_date, date_tasks in tasks_by_date.items():
            with st.expander(f"üìÖ {task_date} ({len(date_tasks)} ‡∏á‡∏≤‡∏ô)"):
                for task in date_tasks:
                    self._render_task_summary(task)

    def _render_task_timeline(self):
        """Render timeline view of tasks"""
        st.markdown("---")
        st.markdown("### üìà ‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå‡∏á‡∏≤‡∏ô")

        # Get tasks with dates
        tasks = self._get_filtered_tasks()
        tasks_with_dates = [t for t in tasks if t.get("DueDate")]

        if not tasks_with_dates:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå")
            return

        # Create timeline chart
        self._render_timeline_chart(tasks_with_dates)

    def _render_timeline_chart(self, tasks: List[Dict[str, Any]]):
        """Render Gantt-style timeline chart"""
        # Prepare data for timeline
        timeline_data = []

        for task in tasks:
            start_date = task.get("CreatedDate", datetime.now())
            end_date = task.get("DueDate", datetime.now())

            timeline_data.append(
                {
                    "Task": task["Title"],
                    "Start": start_date,
                    "Finish": end_date,
                    "Resource": task.get("AssignedToName", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"),
                    "Status": task["Status"],
                    "Priority": task["Priority"],
                }
            )

        # Create Gantt chart
        if timeline_data:
            df = pd.DataFrame(timeline_data)

            fig = px.timeline(
                df,
                x_start="Start",
                x_end="Finish",
                y="Task",
                color="Status",
                title="‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå‡∏á‡∏≤‡∏ô",
                hover_data=["Resource", "Priority"],
            )

            fig.update_layout(
                height=max(400, len(tasks) * 30), xaxis_title="‡πÄ‡∏ß‡∏•‡∏≤", yaxis_title="‡∏á‡∏≤‡∏ô"
            )

            st.plotly_chart(fig, use_container_width=True)

    # Helper methods
    def _get_filtered_tasks(self) -> List[Dict[str, Any]]:
        """Get tasks based on current filters"""
        try:
            # Build filters
            filters = {}

            # Project filter
            if (
                hasattr(st.session_state, "selected_project_id")
                and st.session_state.selected_project_id
            ):
                filters["project_id"] = st.session_state.selected_project_id

            # Task filter
            task_filter = getattr(st.session_state, "task_filter", TaskFilter.ALL)

            if task_filter == TaskFilter.MY_TASKS:
                current_user = st.session_state.get("user_data", {})
                filters["assigned_to"] = current_user.get("UserID")
            elif task_filter == TaskFilter.OVERDUE:
                filters["overdue_only"] = True
            elif task_filter == TaskFilter.THIS_WEEK:
                filters["this_week"] = True
            elif task_filter == TaskFilter.HIGH_PRIORITY:
                filters["priority"] = "High"
            elif task_filter == TaskFilter.BLOCKED:
                filters["status"] = "Blocked"

            # Get tasks
            return self.task_manager.get_all_tasks(filters)

        except Exception as e:
            logger.error(f"Error getting filtered tasks: {e}")
            st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô")
            return []

    def _organize_tasks_by_status(
        self, tasks: List[Dict[str, Any]]
    ) -> Dict[str, List[Dict[str, Any]]]:
        """Organize tasks by status for Kanban board"""
        organized = {status: [] for status in self.config.kanban_columns}

        for task in tasks:
            status = task["Status"]
            if status in organized:
                organized[status].append(task)

        return organized

    def _get_status_color(self, status: str) -> str:
        """Get color for task status"""
        colors = {
            "Backlog": "#6c757d",
            "To Do": "#007bff",
            "In Progress": "#ffc107",
            "Review": "#fd7e14",
            "Testing": "#20c997",
            "Done": "#28a745",
            "Blocked": "#dc3545",
            "Cancelled": "#6c757d",
        }
        return colors.get(status, "#6c757d")

    def _get_priority_color(self, priority: str) -> str:
        """Get color for task priority"""
        colors = {
            "Low": "#28a745",
            "Medium": "#ffc107",
            "High": "#fd7e14",
            "Critical": "#dc3545",
        }
        return colors.get(priority, "#6c757d")

    def _is_task_overdue(self, task: Dict[str, Any]) -> bool:
        """Check if task is overdue"""
        if not task.get("DueDate"):
            return False

        return task["DueDate"] < datetime.now().date() and task["Status"] not in [
            "Done",
            "Cancelled",
        ]

    def _sort_tasks(
        self, tasks: List[Dict[str, Any]], sort_by: str, sort_order: str
    ) -> List[Dict[str, Any]]:
        """Sort tasks based on criteria"""
        reverse = sort_order == "‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô"

        if sort_by == "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á":
            return sorted(
                tasks, key=lambda x: x.get("CreatedDate", datetime.min), reverse=reverse
            )
        elif sort_by == "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á":
            return sorted(
                tasks, key=lambda x: x.get("DueDate", date.max), reverse=reverse
            )
        elif sort_by == "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç":
            priority_order = {"Critical": 4, "High": 3, "Medium": 2, "Low": 1}
            return sorted(
                tasks,
                key=lambda x: priority_order.get(x["Priority"], 0),
                reverse=reverse,
            )
        elif sort_by == "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞":
            return sorted(tasks, key=lambda x: x["Status"], reverse=reverse)
        elif sort_by == "‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô":
            return sorted(tasks, key=lambda x: x["Title"], reverse=reverse)

        return tasks

    def _group_tasks_by_date(
        self, tasks: List[Dict[str, Any]]
    ) -> Dict[str, List[Dict[str, Any]]]:
        """Group tasks by due date"""
        grouped = {}

        for task in tasks:
            if task.get("DueDate"):
                date_str = task["DueDate"].strftime("%d/%m/%Y")
                if date_str not in grouped:
                    grouped[date_str] = []
                grouped[date_str].append(task)

        return dict(sorted(grouped.items()))

    def _render_task_summary(self, task: Dict[str, Any]):
        """Render brief task summary"""
        priority_badge = self.ui_components.render_priority_badge(task["Priority"])
        status_badge = self.ui_components.render_status_badge(task["Status"])

        col1, col2, col3 = st.columns([2, 1, 1])

        with col1:
            st.markdown(f"**{task['Title']}**")
            if task.get("AssignedToName"):
                st.markdown(f"üë§ {task['AssignedToName']}")

        with col2:
            st.markdown(priority_badge, unsafe_allow_html=True)

        with col3:
            st.markdown(status_badge, unsafe_allow_html=True)

    # Modal functions (placeholders for detailed implementations)
    def _show_create_task_modal(self):
        """Show create task modal"""
        # Implementation would be here
        st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _show_edit_task_modal(self, task_id: int):
        """Show edit task modal"""
        st.info(f"üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô ID: {task_id} ‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _show_task_details(self, task_id: int):
        """Show detailed task view"""
        st.info(f"üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô ID: {task_id} ‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _show_time_tracking_modal(self, task_id: int):
        """Show time tracking modal"""
        st.info(f"üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ ID: {task_id} ‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _show_quick_task_form(self, status: str):
        """Show quick task creation form"""
        st.info(f"üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {status} ‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _show_task_analytics(self):
        """Show task analytics"""
        st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _show_task_settings(self):
        """Show task settings"""
        st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    # Bulk action methods (placeholders)
    def _show_bulk_status_update(
        self, selected_indices: List[int], tasks: List[Dict[str, Any]]
    ):
        """Show bulk status update modal"""
        st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _show_bulk_assignment(
        self, selected_indices: List[int], tasks: List[Dict[str, Any]]
    ):
        """Show bulk assignment modal"""
        st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _show_bulk_due_date_update(
        self, selected_indices: List[int], tasks: List[Dict[str, Any]]
    ):
        """Show bulk due date update modal"""
        st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def _show_bulk_delete_confirmation(
        self, selected_indices: List[int], tasks: List[Dict[str, Any]]
    ):
        """Show bulk delete confirmation"""
        st.info("üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")


# Main render function
def render_tasks_ui(db_manager, theme_manager: ThemeManager):
    """Main function to render tasks UI"""
    try:
        tasks_ui = TasksUI(db_manager, theme_manager)
        tasks_ui.render_tasks_page()
    except Exception as e:
        logger.error(f"Error rendering tasks UI: {e}")
        st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô")


# Advanced Task Management Components
class AdvancedTaskComponents:
    """Advanced task management components"""

    def __init__(self, db_manager, theme_manager: ThemeManager):
        self.db = db_manager
        self.task_manager = TaskManager(db_manager)
        self.theme = theme_manager
        self.ui_components = UIComponents(theme_manager)

    def render_task_dependencies_view(self, task_id: int):
        """Render task dependencies visualization"""
        st.markdown("### üîó ‡∏Å‡∏≤‡∏£‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô")

        # Get task dependencies
        dependencies = self.task_manager.get_task_dependencies(task_id)

        if not dependencies:
            st.info("‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô")
            return

        # Create dependency graph
        self._render_dependency_graph(dependencies)

    def _render_dependency_graph(self, dependencies: List[Dict[str, Any]]):
        """Render dependency graph using Plotly"""
        # Implementation for dependency visualization
        st.info("üöß ‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    def render_time_tracking_dashboard(self, user_id: Optional[int] = None):
        """Render time tracking dashboard"""
        st.markdown("### ‚è±Ô∏è ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤")

        # Time tracking metrics
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            today_hours = self._get_today_hours(user_id)
            st.metric("‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", f"{today_hours:.1f}h")

        with col2:
            week_hours = self._get_week_hours(user_id)
            st.metric("‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ", f"{week_hours:.1f}h")

        with col3:
            month_hours = self._get_month_hours(user_id)
            st.metric("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", f"{month_hours:.1f}h")

        with col4:
            efficiency = self._get_efficiency_ratio(user_id)
            st.metric("‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û", f"{efficiency:.1%}")

        # Time tracking chart
        self._render_time_tracking_chart(user_id)

    def _get_today_hours(self, user_id: Optional[int]) -> float:
        """Get hours logged today"""
        # Implementation for getting today's hours
        return 6.5  # Placeholder

    def _get_week_hours(self, user_id: Optional[int]) -> float:
        """Get hours logged this week"""
        # Implementation for getting week's hours
        return 32.5  # Placeholder

    def _get_month_hours(self, user_id: Optional[int]) -> float:
        """Get hours logged this month"""
        # Implementation for getting month's hours
        return 145.0  # Placeholder

    def _get_efficiency_ratio(self, user_id: Optional[int]) -> float:
        """Get efficiency ratio (actual vs estimated)"""
        # Implementation for calculating efficiency
        return 0.85  # Placeholder

    def _render_time_tracking_chart(self, user_id: Optional[int]):
        """Render time tracking chart"""
        # Generate sample data for demonstration
        dates = pd.date_range(start="2024-01-01", end="2024-01-14", freq="D")
        hours = np.random.uniform(4, 10, len(dates))

        fig = px.bar(
            x=dates,
            y=hours,
            title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤",
            labels={"x": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "y": "‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"},
        )

        fig.update_layout(xaxis_title="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", yaxis_title="‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", showlegend=False)

        st.plotly_chart(fig, use_container_width=True)

    def render_task_workload_analysis(self):
        """Render workload analysis for team members"""
        st.markdown("### üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏£‡∏∞‡∏á‡∏≤‡∏ô")

        # Get team workload data
        workload_data = self._get_team_workload_data()

        if not workload_data:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏£‡∏∞‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")
            return

        # Create workload chart
        fig = go.Figure()

        members = [w["member_name"] for w in workload_data]
        current_load = [w["current_hours"] for w in workload_data]
        capacity = [w["capacity_hours"] for w in workload_data]

        fig.add_trace(
            go.Bar(
                name="‡∏†‡∏≤‡∏£‡∏∞‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", x=members, y=current_load, marker_color="lightblue"
            )
        )

        fig.add_trace(
            go.Bar(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ", x=members, y=capacity, marker_color="darkblue")
        )

        fig.update_layout(
            title="‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏£‡∏∞‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ",
            xaxis_title="‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡∏°",
            yaxis_title="‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
            barmode="group",
        )

        st.plotly_chart(fig, use_container_width=True)

        # Workload recommendations
        self._render_workload_recommendations(workload_data)

    def _get_team_workload_data(self) -> List[Dict[str, Any]]:
        """Get team workload data"""
        # Sample data - replace with actual implementation
        return [
            {"member_name": "‡∏™‡∏°‡∏ä‡∏≤‡∏¢", "current_hours": 35, "capacity_hours": 40},
            {"member_name": "‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á", "current_hours": 42, "capacity_hours": 40},
            {"member_name": "‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå", "current_hours": 28, "capacity_hours": 40},
            {"member_name": "‡∏™‡∏°‡πÉ‡∏à", "current_hours": 38, "capacity_hours": 40},
        ]

    def _render_workload_recommendations(self, workload_data: List[Dict[str, Any]]):
        """Render workload recommendations"""
        st.markdown("### üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏á‡∏≤‡∏ô")

        for member in workload_data:
            utilization = member["current_hours"] / member["capacity_hours"]

            if utilization > 1.0:
                st.warning(
                    f"‚ö†Ô∏è {member['member_name']}: ‡∏†‡∏≤‡∏£‡∏∞‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á ({utilization:.1%})"
                )
            elif utilization < 0.7:
                st.info(
                    f"üí° {member['member_name']}: ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ ({utilization:.1%})"
                )
            else:
                st.success(
                    f"‚úÖ {member['member_name']}: ‡∏†‡∏≤‡∏£‡∏∞‡∏á‡∏≤‡∏ô‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ({utilization:.1%})"
                )


# Task Performance Analytics
class TaskPerformanceAnalytics:
    """Task performance analytics and insights"""

    def __init__(self, db_manager):
        self.db = db_manager
        self.task_manager = TaskManager(db_manager)

    def get_task_completion_trends(self, days: int = 30) -> Dict[str, Any]:
        """Get task completion trends"""
        # Implementation for completion trends
        return {
            "completion_rate": 0.85,
            "average_completion_time": 5.2,
            "trend": "increasing",
        }

    def get_team_productivity_metrics(self) -> Dict[str, Any]:
        """Get team productivity metrics"""
        # Implementation for productivity metrics
        return {
            "tasks_per_person_per_day": 2.3,
            "average_task_size": "Medium",
            "velocity_trend": "stable",
        }

    def get_bottleneck_analysis(self) -> List[Dict[str, Any]]:
        """Analyze workflow bottlenecks"""
        # Implementation for bottleneck analysis
        return [
            {"stage": "Review", "avg_duration": 2.5, "bottleneck_score": 0.8},
            {"stage": "Testing", "avg_duration": 1.8, "bottleneck_score": 0.6},
        ]


# Export functionality
def export_tasks_data(tasks: List[Dict[str, Any]], format: str = "excel") -> bytes:
    """Export tasks data in various formats"""
    if format == "excel":
        # Create Excel export
        df = pd.DataFrame(tasks)
        # Implementation for Excel export
        return b""  # Placeholder
    elif format == "csv":
        # Create CSV export
        df = pd.DataFrame(tasks)
        return df.to_csv(index=False).encode("utf-8")
    elif format == "json":
        # Create JSON export
        return json.dumps(tasks, ensure_ascii=False, indent=2).encode("utf-8")

    return b""
