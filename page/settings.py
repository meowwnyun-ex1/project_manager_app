"""
pages/settings.py
System settings page
"""

import streamlit as st
from datetime import datetime, time
from typing import Dict, List, Any, Optional
import logging
import json

from modules.ui_components import (
    FormBuilder,
    CardComponent,
    NotificationManager,
    ModernModal,
)
from modules.auth import require_role, get_current_user
from modules.settings import SettingsManager
from utils.error_handler import handle_streamlit_errors, safe_execute
from utils.performance_monitor import monitor_performance

logger = logging.getLogger(__name__)


class SettingsPage:
    """System settings page class"""

    def __init__(self, settings_manager, user_manager):
        self.settings_manager = settings_manager
        self.user_manager = user_manager

    @handle_streamlit_errors()
    @monitor_performance("settings_page_render")
    def show(self):
        """Show settings page"""
        st.title("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö")

        # Get current user
        current_user = get_current_user()
        if not current_user:
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
            return

        # Settings tabs
        tab1, tab2, tab3, tab4, tab5 = st.tabs(
            ["üîß ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "üîê ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", "üë§ ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", "üìß ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "üîÑ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"]
        )

        with tab1:
            self._show_general_settings()

        with tab2:
            self._show_security_settings()

        with tab3:
            self._show_profile_settings()

        with tab4:
            self._show_notification_settings()

        with tab5:
            self._show_backup_settings()

    def _show_general_settings(self):
        """Show general system settings"""
        st.subheader("üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")

        # Only admins can modify system settings
        current_user = get_current_user()
        is_admin = current_user.get("Role") == "Admin"

        if not is_admin:
            st.info("üí° ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ")

        # Get current settings
        settings = self._get_system_settings()

        with st.form("general_settings"):
            col1, col2 = st.columns(2)

            with col1:
                st.markdown("#### üé® ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•")

                app_name = st.text_input(
                    "‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô",
                    value=settings.get("app_name", "DENSO Project Manager Pro"),
                    disabled=not is_admin,
                )

                theme = st.selectbox(
                    "‡∏ò‡∏µ‡∏°",
                    ["auto", "light", "dark"],
                    index=["auto", "light", "dark"].index(
                        settings.get("default_theme", "auto")
                    ),
                    disabled=not is_admin,
                )

                language = st.selectbox(
                    "‡∏†‡∏≤‡∏©‡∏≤",
                    ["th", "en"],
                    index=["th", "en"].index(settings.get("default_language", "th")),
                    disabled=not is_admin,
                )

                items_per_page = st.number_input(
                    "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤",
                    min_value=5,
                    max_value=100,
                    value=int(settings.get("items_per_page", 20)),
                    disabled=not is_admin,
                )

            with col2:
                st.markdown("#### üîÑ ‡∏£‡∏∞‡∏ö‡∏ö")

                maintenance_mode = st.checkbox(
                    "‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤",
                    value=settings.get("maintenance_mode", False),
                    disabled=not is_admin,
                    help="‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ ‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ",
                )

                auto_backup = st.checkbox(
                    "‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
                    value=settings.get("auto_backup_enabled", True),
                    disabled=not is_admin,
                )

                backup_time = st.time_input(
                    "‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                    value=time(2, 0),  # 2:00 AM default
                    disabled=not is_admin or not auto_backup,
                )

                max_upload_size = st.number_input(
                    "‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (MB)",
                    min_value=1,
                    max_value=500,
                    value=int(settings.get("max_upload_size", 50)),
                    disabled=not is_admin,
                )

            st.markdown("#### üìä ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")

            col1, col2 = st.columns(2)

            with col1:
                session_timeout = st.number_input(
                    "‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô (‡∏ô‡∏≤‡∏ó‡∏µ)",
                    min_value=15,
                    max_value=480,
                    value=int(settings.get("session_timeout", 60)),
                    disabled=not is_admin,
                )

                enable_notifications = st.checkbox(
                    "‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
                    value=settings.get("enable_notifications", True),
                    disabled=not is_admin,
                )

            with col2:
                log_level = st.selectbox(
                    "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log",
                    ["DEBUG", "INFO", "WARNING", "ERROR"],
                    index=["DEBUG", "INFO", "WARNING", "ERROR"].index(
                        settings.get("log_level", "INFO")
                    ),
                    disabled=not is_admin,
                )

                enable_audit_log = st.checkbox(
                    "‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
                    value=settings.get("enable_audit_log", True),
                    disabled=not is_admin,
                )

            if is_admin:
                col1, col2 = st.columns([1, 3])
                with col1:
                    if st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", type="primary"):
                        new_settings = {
                            "app_name": app_name,
                            "default_theme": theme,
                            "default_language": language,
                            "items_per_page": items_per_page,
                            "maintenance_mode": maintenance_mode,
                            "auto_backup_enabled": auto_backup,
                            "backup_time": backup_time.strftime("%H:%M"),
                            "max_upload_size": max_upload_size,
                            "session_timeout": session_timeout,
                            "enable_notifications": enable_notifications,
                            "log_level": log_level,
                            "enable_audit_log": enable_audit_log,
                        }

                        if self._update_system_settings(new_settings):
                            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                            st.rerun()

    def _show_security_settings(self):
        """Show security settings"""
        st.subheader("üîê ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")

        current_user = get_current_user()
        is_admin = current_user.get("Role") == "Admin"

        # Get security settings
        security_settings = self._get_security_settings()

        with st.form("security_settings"):
            col1, col2 = st.columns(2)

            with col1:
                st.markdown("#### üîë ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")

                password_min_length = st.number_input(
                    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥",
                    min_value=6,
                    max_value=20,
                    value=int(security_settings.get("password_min_length", 8)),
                    disabled=not is_admin,
                )

                require_uppercase = st.checkbox(
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà",
                    value=security_settings.get("require_uppercase", True),
                    disabled=not is_admin,
                )

                require_lowercase = st.checkbox(
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å",
                    value=security_settings.get("require_lowercase", True),
                    disabled=not is_admin,
                )

                require_numbers = st.checkbox(
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç",
                    value=security_settings.get("require_numbers", True),
                    disabled=not is_admin,
                )

                require_special = st.checkbox(
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©",
                    value=security_settings.get("require_special", True),
                    disabled=not is_admin,
                )

            with col2:
                st.markdown("#### üõ°Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")

                max_login_attempts = st.number_input(
                    "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ú‡∏¥‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
                    min_value=3,
                    max_value=10,
                    value=int(security_settings.get("max_login_attempts", 5)),
                    disabled=not is_admin,
                )

                lockout_duration = st.number_input(
                    "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πá‡∏≠‡∏Ñ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (‡∏ô‡∏≤‡∏ó‡∏µ)",
                    min_value=5,
                    max_value=60,
                    value=int(security_settings.get("lockout_duration", 15)),
                    disabled=not is_admin,
                )

                force_password_change = st.number_input(
                    "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å (‡∏ß‡∏±‡∏ô)",
                    min_value=30,
                    max_value=365,
                    value=int(security_settings.get("password_expiry_days", 90)),
                    disabled=not is_admin,
                )

                two_factor_auth = st.checkbox(
                    "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Two-Factor Authentication",
                    value=security_settings.get("enable_2fa", False),
                    disabled=not is_admin,
                )

            if is_admin:
                if st.form_submit_button("üîê ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", type="primary"):
                    new_security_settings = {
                        "password_min_length": password_min_length,
                        "require_uppercase": require_uppercase,
                        "require_lowercase": require_lowercase,
                        "require_numbers": require_numbers,
                        "require_special": require_special,
                        "max_login_attempts": max_login_attempts,
                        "lockout_duration": lockout_duration,
                        "password_expiry_days": force_password_change,
                        "enable_2fa": two_factor_auth,
                    }

                    if self._update_security_settings(new_security_settings):
                        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                        st.rerun()

    def _show_profile_settings(self):
        """Show user profile settings"""
        st.subheader("üë§ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå")

        current_user = get_current_user()
        user_data = self._get_user_profile(current_user["UserID"])

        if not user_data:
            st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ")
            return

        with st.form("profile_settings"):
            col1, col2 = st.columns(2)

            with col1:
                st.markdown("#### üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")

                first_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠", value=user_data.get("FirstName", ""))
                last_name = st.text_input("‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", value=user_data.get("LastName", ""))
                email = st.text_input("‡∏≠‡∏µ‡πÄ‡∏°‡∏•", value=user_data.get("Email", ""))
                phone = st.text_input("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", value=user_data.get("Phone", ""))

            with col2:
                st.markdown("#### üé® ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")

                user_theme = st.selectbox(
                    "‡∏ò‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", ["‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö", "‡∏™‡∏ß‡πà‡∏≤‡∏á", "‡∏°‡∏∑‡∏î"], index=0
                )

                user_language = st.selectbox(
                    "‡∏†‡∏≤‡∏©‡∏≤", ["‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö", "‡πÑ‡∏ó‡∏¢", "English"], index=0
                )

                timezone = st.selectbox(
                    "‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤",
                    ["Asia/Bangkok", "UTC", "Asia/Tokyo", "America/New_York"],
                    index=0,
                )

                date_format = st.selectbox(
                    "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", ["DD/MM/YYYY", "MM/DD/YYYY", "YYYY-MM-DD"], index=0
                )

            st.markdown("#### üîî ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")

            col1, col2 = st.columns(2)

            with col1:
                email_notifications = st.checkbox(
                    "‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•", value=user_data.get("EmailNotifications", True)
                )

                task_reminders = st.checkbox(
                    "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
                    value=user_data.get("TaskReminders", True),
                )

            with col2:
                project_updates = st.checkbox(
                    "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
                    value=user_data.get("ProjectUpdates", True),
                )

                system_announcements = st.checkbox(
                    "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏£‡∏∞‡∏ö‡∏ö",
                    value=user_data.get("SystemAnnouncements", True),
                )

            col1, col2 = st.columns([1, 3])
            with col1:
                if st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", type="primary"):
                    profile_data = {
                        "user_id": current_user["UserID"],
                        "first_name": first_name,
                        "last_name": last_name,
                        "email": email,
                        "phone": phone,
                        "user_theme": user_theme,
                        "user_language": user_language,
                        "timezone": timezone,
                        "date_format": date_format,
                        "email_notifications": email_notifications,
                        "task_reminders": task_reminders,
                        "project_updates": project_updates,
                        "system_announcements": system_announcements,
                    }

                    if self._update_user_profile(profile_data):
                        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                        st.rerun()

        # Password change section
        st.markdown("---")
        st.markdown("#### üîë ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")

        with st.form("change_password"):
            col1, col2, col3 = st.columns(3)

            with col1:
                current_password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", type="password")

            with col2:
                new_password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password")

            with col3:
                confirm_password = st.text_input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password")
