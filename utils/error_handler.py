#!/usr/bin/env python3
"""
utils/error_handler.py
Error Handling Utilities for DENSO Project Manager Pro
"""
import logging
import streamlit as st
import traceback
from functools import wraps
from typing import Any, Callable, Optional

logger = logging.getLogger(__name__)


class ErrorHandler:
    """Centralized error handling"""

    @staticmethod
    def handle_database_error(e: Exception, operation: str = "database operation"):
        """Handle database-specific errors"""
        error_msg = str(e)

        if "Login failed" in error_msg:
            st.error("üîê ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        elif "timeout" in error_msg.lower():
            st.error("‚è±Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠")
        elif "server was not found" in error_msg.lower():
            st.error("üîç ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
        else:
            st.error(f"üíæ ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {operation} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")

        logger.error(f"Database error in {operation}: {error_msg}")

    @staticmethod
    def handle_validation_error(field: str, message: str):
        """Handle validation errors"""
        st.error(f"‚ùå {field}: {message}")
        logger.warning(f"Validation error - {field}: {message}")

    @staticmethod
    def handle_permission_error(required_permission: str):
        """Handle permission errors"""
        st.error(f"üö´ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ {required_permission}")
        logger.warning(f"Permission denied: {required_permission}")

    @staticmethod
    def handle_general_error(e: Exception, context: str = "operation"):
        """Handle general errors"""
        st.error(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ {context}")
        logger.error(f"Error in {context}: {str(e)}\n{traceback.format_exc()}")


def handle_streamlit_errors(func: Callable) -> Callable:
    """Decorator for handling Streamlit errors"""

    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            ErrorHandler.handle_general_error(e, func.__name__)
            return None

    return wrapper


def handle_database_errors(func: Callable) -> Callable:
    """Decorator for handling database errors specifically"""

    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            ErrorHandler.handle_database_error(e, func.__name__)
            return None

    return wrapper


def safe_execute(func: Callable, *args, default_return: Any = None, **kwargs) -> Any:
    """Safely execute a function with error handling"""
    try:
        return func(*args, **kwargs)
    except Exception as e:
        ErrorHandler.handle_general_error(e, func.__name__)
        return default_return


def get_error_handler() -> ErrorHandler:
    """Get ErrorHandler instance"""
    return ErrorHandler()


# Additional utility functions for error handling
def log_error(error: Exception, context: str = "", user_id: int = None):
    """Log error with context"""
    error_info = {
        "error": str(error),
        "context": context,
        "user_id": user_id,
        "traceback": traceback.format_exc(),
    }
    logger.error(f"Error logged: {error_info}")


def validate_required_fields(data: dict, required_fields: list) -> tuple[bool, str]:
    """Validate required fields in data"""
    missing_fields = []
    for field in required_fields:
        if field not in data or not data[field]:
            missing_fields.append(field)

    if missing_fields:
        return False, f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: {', '.join(missing_fields)}"
    return True, ""


def handle_api_error(response, operation: str = "API call"):
    """Handle API response errors"""
    if response.status_code == 400:
        st.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {operation}")
    elif response.status_code == 401:
        st.error("üîê ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà")
    elif response.status_code == 403:
        st.error("üö´ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ")
    elif response.status_code == 404:
        st.error("üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
    elif response.status_code == 500:
        st.error("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
    else:
        st.error(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ {operation}")


def create_error_toast(message: str, error_type: str = "error"):
    """Create error toast notification"""
    if error_type == "error":
        st.toast(f"‚ùå {message}", icon="‚ùå")
    elif error_type == "warning":
        st.toast(f"‚ö†Ô∏è {message}", icon="‚ö†Ô∏è")
    elif error_type == "info":
        st.toast(f"‚ÑπÔ∏è {message}", icon="‚ÑπÔ∏è")


class DatabaseErrorHandler:
    """Specialized database error handler"""

    @staticmethod
    def handle_connection_error():
        """Handle database connection errors"""
        st.error(
            """
        üîå **‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ**
        
        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
        - ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        - ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ô secrets.toml
        - Firewall ‡πÅ‡∏•‡∏∞ network connectivity
        """
        )

    @staticmethod
    def handle_query_error(query: str, error: Exception):
        """Handle SQL query errors"""
        logger.error(f"Query error: {query}\nError: {str(error)}")
        st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

    @staticmethod
    def handle_transaction_error(operation: str):
        """Handle transaction errors"""
        st.error(f"üíæ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ {operation} - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")


class ValidationErrorHandler:
    """Specialized validation error handler"""

    @staticmethod
    def handle_required_field_error(field_name: str):
        """Handle required field validation"""
        st.error(f"üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å {field_name}")

    @staticmethod
    def handle_format_error(field_name: str, expected_format: str):
        """Handle format validation errors"""
        st.error(f"üìã ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö {field_name} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: {expected_format})")

    @staticmethod
    def handle_length_error(
        field_name: str, min_length: int = None, max_length: int = None
    ):
        """Handle length validation errors"""
        if min_length and max_length:
            st.error(f"üìè {field_name} ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß {min_length}-{max_length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
        elif min_length:
            st.error(f"üìè {field_name} ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ {min_length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
        elif max_length:
            st.error(f"üìè {field_name} ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô {max_length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")


# Context manager for error handling
class ErrorContext:
    """Context manager for error handling"""

    def __init__(self, operation: str, show_spinner: bool = True):
        self.operation = operation
        self.show_spinner = show_spinner
        self.spinner = None

    def __enter__(self):
        if self.show_spinner:
            self.spinner = st.spinner(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á{self.operation}...")
            self.spinner.__enter__()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.show_spinner and self.spinner:
            self.spinner.__exit__(exc_type, exc_val, exc_tb)

        if exc_type is not None:
            ErrorHandler.handle_general_error(exc_val, self.operation)
            return True  # Suppress the exception
        return False


# Usage examples:
# @handle_database_errors
# def get_users():
#     return db.fetch_all("SELECT * FROM Users")

# with ErrorContext("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
#     data = load_data()

# is_valid, error_msg = validate_required_fields(form_data, ['name', 'email'])
# if not is_valid:
#     st.error(error_msg)
